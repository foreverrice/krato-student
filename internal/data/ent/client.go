// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"finance/internal/data/ent/migrate"

	"finance/internal/data/ent/storebalanceaccount"
	"finance/internal/data/ent/storebalancechangedetail"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// StoreBalanceAccount is the client for interacting with the StoreBalanceAccount builders.
	StoreBalanceAccount *StoreBalanceAccountClient
	// StoreBalanceChangeDetail is the client for interacting with the StoreBalanceChangeDetail builders.
	StoreBalanceChangeDetail *StoreBalanceChangeDetailClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.StoreBalanceAccount = NewStoreBalanceAccountClient(c.config)
	c.StoreBalanceChangeDetail = NewStoreBalanceChangeDetailClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		StoreBalanceAccount:      NewStoreBalanceAccountClient(cfg),
		StoreBalanceChangeDetail: NewStoreBalanceChangeDetailClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		StoreBalanceAccount:      NewStoreBalanceAccountClient(cfg),
		StoreBalanceChangeDetail: NewStoreBalanceChangeDetailClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		StoreBalanceAccount.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.StoreBalanceAccount.Use(hooks...)
	c.StoreBalanceChangeDetail.Use(hooks...)
}

// StoreBalanceAccountClient is a client for the StoreBalanceAccount schema.
type StoreBalanceAccountClient struct {
	config
}

// NewStoreBalanceAccountClient returns a client for the StoreBalanceAccount from the given config.
func NewStoreBalanceAccountClient(c config) *StoreBalanceAccountClient {
	return &StoreBalanceAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storebalanceaccount.Hooks(f(g(h())))`.
func (c *StoreBalanceAccountClient) Use(hooks ...Hook) {
	c.hooks.StoreBalanceAccount = append(c.hooks.StoreBalanceAccount, hooks...)
}

// Create returns a builder for creating a StoreBalanceAccount entity.
func (c *StoreBalanceAccountClient) Create() *StoreBalanceAccountCreate {
	mutation := newStoreBalanceAccountMutation(c.config, OpCreate)
	return &StoreBalanceAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StoreBalanceAccount entities.
func (c *StoreBalanceAccountClient) CreateBulk(builders ...*StoreBalanceAccountCreate) *StoreBalanceAccountCreateBulk {
	return &StoreBalanceAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StoreBalanceAccount.
func (c *StoreBalanceAccountClient) Update() *StoreBalanceAccountUpdate {
	mutation := newStoreBalanceAccountMutation(c.config, OpUpdate)
	return &StoreBalanceAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreBalanceAccountClient) UpdateOne(sba *StoreBalanceAccount) *StoreBalanceAccountUpdateOne {
	mutation := newStoreBalanceAccountMutation(c.config, OpUpdateOne, withStoreBalanceAccount(sba))
	return &StoreBalanceAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreBalanceAccountClient) UpdateOneID(id uint32) *StoreBalanceAccountUpdateOne {
	mutation := newStoreBalanceAccountMutation(c.config, OpUpdateOne, withStoreBalanceAccountID(id))
	return &StoreBalanceAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StoreBalanceAccount.
func (c *StoreBalanceAccountClient) Delete() *StoreBalanceAccountDelete {
	mutation := newStoreBalanceAccountMutation(c.config, OpDelete)
	return &StoreBalanceAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreBalanceAccountClient) DeleteOne(sba *StoreBalanceAccount) *StoreBalanceAccountDeleteOne {
	return c.DeleteOneID(sba.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *StoreBalanceAccountClient) DeleteOneID(id uint32) *StoreBalanceAccountDeleteOne {
	builder := c.Delete().Where(storebalanceaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreBalanceAccountDeleteOne{builder}
}

// Query returns a query builder for StoreBalanceAccount.
func (c *StoreBalanceAccountClient) Query() *StoreBalanceAccountQuery {
	return &StoreBalanceAccountQuery{
		config: c.config,
	}
}

// Get returns a StoreBalanceAccount entity by its id.
func (c *StoreBalanceAccountClient) Get(ctx context.Context, id uint32) (*StoreBalanceAccount, error) {
	return c.Query().Where(storebalanceaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreBalanceAccountClient) GetX(ctx context.Context, id uint32) *StoreBalanceAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StoreBalanceAccountClient) Hooks() []Hook {
	return c.hooks.StoreBalanceAccount
}

// StoreBalanceChangeDetailClient is a client for the StoreBalanceChangeDetail schema.
type StoreBalanceChangeDetailClient struct {
	config
}

// NewStoreBalanceChangeDetailClient returns a client for the StoreBalanceChangeDetail from the given config.
func NewStoreBalanceChangeDetailClient(c config) *StoreBalanceChangeDetailClient {
	return &StoreBalanceChangeDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storebalancechangedetail.Hooks(f(g(h())))`.
func (c *StoreBalanceChangeDetailClient) Use(hooks ...Hook) {
	c.hooks.StoreBalanceChangeDetail = append(c.hooks.StoreBalanceChangeDetail, hooks...)
}

// Create returns a builder for creating a StoreBalanceChangeDetail entity.
func (c *StoreBalanceChangeDetailClient) Create() *StoreBalanceChangeDetailCreate {
	mutation := newStoreBalanceChangeDetailMutation(c.config, OpCreate)
	return &StoreBalanceChangeDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StoreBalanceChangeDetail entities.
func (c *StoreBalanceChangeDetailClient) CreateBulk(builders ...*StoreBalanceChangeDetailCreate) *StoreBalanceChangeDetailCreateBulk {
	return &StoreBalanceChangeDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StoreBalanceChangeDetail.
func (c *StoreBalanceChangeDetailClient) Update() *StoreBalanceChangeDetailUpdate {
	mutation := newStoreBalanceChangeDetailMutation(c.config, OpUpdate)
	return &StoreBalanceChangeDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreBalanceChangeDetailClient) UpdateOne(sbcd *StoreBalanceChangeDetail) *StoreBalanceChangeDetailUpdateOne {
	mutation := newStoreBalanceChangeDetailMutation(c.config, OpUpdateOne, withStoreBalanceChangeDetail(sbcd))
	return &StoreBalanceChangeDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreBalanceChangeDetailClient) UpdateOneID(id uint32) *StoreBalanceChangeDetailUpdateOne {
	mutation := newStoreBalanceChangeDetailMutation(c.config, OpUpdateOne, withStoreBalanceChangeDetailID(id))
	return &StoreBalanceChangeDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StoreBalanceChangeDetail.
func (c *StoreBalanceChangeDetailClient) Delete() *StoreBalanceChangeDetailDelete {
	mutation := newStoreBalanceChangeDetailMutation(c.config, OpDelete)
	return &StoreBalanceChangeDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreBalanceChangeDetailClient) DeleteOne(sbcd *StoreBalanceChangeDetail) *StoreBalanceChangeDetailDeleteOne {
	return c.DeleteOneID(sbcd.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *StoreBalanceChangeDetailClient) DeleteOneID(id uint32) *StoreBalanceChangeDetailDeleteOne {
	builder := c.Delete().Where(storebalancechangedetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreBalanceChangeDetailDeleteOne{builder}
}

// Query returns a query builder for StoreBalanceChangeDetail.
func (c *StoreBalanceChangeDetailClient) Query() *StoreBalanceChangeDetailQuery {
	return &StoreBalanceChangeDetailQuery{
		config: c.config,
	}
}

// Get returns a StoreBalanceChangeDetail entity by its id.
func (c *StoreBalanceChangeDetailClient) Get(ctx context.Context, id uint32) (*StoreBalanceChangeDetail, error) {
	return c.Query().Where(storebalancechangedetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreBalanceChangeDetailClient) GetX(ctx context.Context, id uint32) *StoreBalanceChangeDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StoreBalanceChangeDetailClient) Hooks() []Hook {
	return c.hooks.StoreBalanceChangeDetail
}
