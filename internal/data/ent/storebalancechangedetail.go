// Code generated by ent, DO NOT EDIT.

package ent

import (
	"finance/internal/data/ent/storebalancechangedetail"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// StoreBalanceChangeDetail is the model entity for the StoreBalanceChangeDetail schema.
type StoreBalanceChangeDetail struct {
	config `json:"-"`
	// ID of the ent.
	// 主键自增
	ID uint32 `json:"id,omitempty"`
	// store_balance_accounts表主键
	AccountID int32 `json:"account_id,omitempty"`
	// 门店编号
	StoreCode string `json:"store_code,omitempty"`
	// 1订货支付-|2提现-|3退款+|4线上充值+|5线下充值+|6虚拟充值+
	Type int8 `json:"type,omitempty"`
	// 内部流水号(订单编号)
	InBatchNo string `json:"in_batch_no,omitempty"`
	// 第三方支付类型(付款银行)
	ThirdPayType string `json:"third_pay_type,omitempty"`
	// 付款机构
	ThirdPayOrgan string `json:"third_pay_organ,omitempty"`
	// 第三方付款账号
	ThirdPayNo string `json:"third_pay_no,omitempty"`
	// bank_card_bind_accounts主键
	BcBindAccID int32 `json:"bc_bind_acc_id,omitempty"`
	// 收款账号
	CashAccountNo string `json:"cash_account_no,omitempty"`
	// 收款主体
	CashPrincipal string `json:"cash_principal,omitempty"`
	// 收款银行名称
	CashBank string `json:"cash_bank,omitempty"`
	// 交易流水号
	TransactionNo string `json:"transaction_no,omitempty"`
	// 交易时间
	TransactionAt time.Time `json:"transaction_at,omitempty"`
	// 变动前金额
	BeforeFee float64 `json:"before_fee,omitempty"`
	// 变动金额
	ChangeFee float64 `json:"change_fee,omitempty"`
	// 变动后金额
	AfterFee float64 `json:"after_fee,omitempty"`
	// 操作人编号
	OperatorNo string `json:"operator_no,omitempty"`
	// 流程单号
	FlowNo string `json:"flow_no,omitempty"`
	// -1复合驳回 0复核 1复核通过
	CheckState int8 `json:"check_state,omitempty"`
	// 检查时间
	CheckAt time.Time `json:"check_at,omitempty"`
	// 0未删除|1已删除
	IsDeleted int8 `json:"is_deleted,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StoreBalanceChangeDetail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case storebalancechangedetail.FieldBeforeFee, storebalancechangedetail.FieldChangeFee, storebalancechangedetail.FieldAfterFee:
			values[i] = new(sql.NullFloat64)
		case storebalancechangedetail.FieldID, storebalancechangedetail.FieldAccountID, storebalancechangedetail.FieldType, storebalancechangedetail.FieldBcBindAccID, storebalancechangedetail.FieldCheckState, storebalancechangedetail.FieldIsDeleted:
			values[i] = new(sql.NullInt64)
		case storebalancechangedetail.FieldStoreCode, storebalancechangedetail.FieldInBatchNo, storebalancechangedetail.FieldThirdPayType, storebalancechangedetail.FieldThirdPayOrgan, storebalancechangedetail.FieldThirdPayNo, storebalancechangedetail.FieldCashAccountNo, storebalancechangedetail.FieldCashPrincipal, storebalancechangedetail.FieldCashBank, storebalancechangedetail.FieldTransactionNo, storebalancechangedetail.FieldOperatorNo, storebalancechangedetail.FieldFlowNo:
			values[i] = new(sql.NullString)
		case storebalancechangedetail.FieldTransactionAt, storebalancechangedetail.FieldCheckAt, storebalancechangedetail.FieldUpdatedAt, storebalancechangedetail.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StoreBalanceChangeDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StoreBalanceChangeDetail fields.
func (sbcd *StoreBalanceChangeDetail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storebalancechangedetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sbcd.ID = uint32(value.Int64)
		case storebalancechangedetail.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				sbcd.AccountID = int32(value.Int64)
			}
		case storebalancechangedetail.FieldStoreCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_code", values[i])
			} else if value.Valid {
				sbcd.StoreCode = value.String
			}
		case storebalancechangedetail.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sbcd.Type = int8(value.Int64)
			}
		case storebalancechangedetail.FieldInBatchNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field in_batch_no", values[i])
			} else if value.Valid {
				sbcd.InBatchNo = value.String
			}
		case storebalancechangedetail.FieldThirdPayType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_pay_type", values[i])
			} else if value.Valid {
				sbcd.ThirdPayType = value.String
			}
		case storebalancechangedetail.FieldThirdPayOrgan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_pay_organ", values[i])
			} else if value.Valid {
				sbcd.ThirdPayOrgan = value.String
			}
		case storebalancechangedetail.FieldThirdPayNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_pay_no", values[i])
			} else if value.Valid {
				sbcd.ThirdPayNo = value.String
			}
		case storebalancechangedetail.FieldBcBindAccID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bc_bind_acc_id", values[i])
			} else if value.Valid {
				sbcd.BcBindAccID = int32(value.Int64)
			}
		case storebalancechangedetail.FieldCashAccountNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cash_account_no", values[i])
			} else if value.Valid {
				sbcd.CashAccountNo = value.String
			}
		case storebalancechangedetail.FieldCashPrincipal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cash_principal", values[i])
			} else if value.Valid {
				sbcd.CashPrincipal = value.String
			}
		case storebalancechangedetail.FieldCashBank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cash_bank", values[i])
			} else if value.Valid {
				sbcd.CashBank = value.String
			}
		case storebalancechangedetail.FieldTransactionNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_no", values[i])
			} else if value.Valid {
				sbcd.TransactionNo = value.String
			}
		case storebalancechangedetail.FieldTransactionAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_at", values[i])
			} else if value.Valid {
				sbcd.TransactionAt = value.Time
			}
		case storebalancechangedetail.FieldBeforeFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field before_fee", values[i])
			} else if value.Valid {
				sbcd.BeforeFee = value.Float64
			}
		case storebalancechangedetail.FieldChangeFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field change_fee", values[i])
			} else if value.Valid {
				sbcd.ChangeFee = value.Float64
			}
		case storebalancechangedetail.FieldAfterFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field after_fee", values[i])
			} else if value.Valid {
				sbcd.AfterFee = value.Float64
			}
		case storebalancechangedetail.FieldOperatorNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator_no", values[i])
			} else if value.Valid {
				sbcd.OperatorNo = value.String
			}
		case storebalancechangedetail.FieldFlowNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_no", values[i])
			} else if value.Valid {
				sbcd.FlowNo = value.String
			}
		case storebalancechangedetail.FieldCheckState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field check_state", values[i])
			} else if value.Valid {
				sbcd.CheckState = int8(value.Int64)
			}
		case storebalancechangedetail.FieldCheckAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field check_at", values[i])
			} else if value.Valid {
				sbcd.CheckAt = value.Time
			}
		case storebalancechangedetail.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				sbcd.IsDeleted = int8(value.Int64)
			}
		case storebalancechangedetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sbcd.UpdatedAt = value.Time
			}
		case storebalancechangedetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sbcd.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this StoreBalanceChangeDetail.
// Note that you need to call StoreBalanceChangeDetail.Unwrap() before calling this method if this StoreBalanceChangeDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (sbcd *StoreBalanceChangeDetail) Update() *StoreBalanceChangeDetailUpdateOne {
	return (&StoreBalanceChangeDetailClient{config: sbcd.config}).UpdateOne(sbcd)
}

// Unwrap unwraps the StoreBalanceChangeDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sbcd *StoreBalanceChangeDetail) Unwrap() *StoreBalanceChangeDetail {
	_tx, ok := sbcd.config.driver.(*txDriver)
	if !ok {
		panic("ent: StoreBalanceChangeDetail is not a transactional entity")
	}
	sbcd.config.driver = _tx.drv
	return sbcd
}

// String implements the fmt.Stringer.
func (sbcd *StoreBalanceChangeDetail) String() string {
	var builder strings.Builder
	builder.WriteString("StoreBalanceChangeDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sbcd.ID))
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", sbcd.AccountID))
	builder.WriteString(", ")
	builder.WriteString("store_code=")
	builder.WriteString(sbcd.StoreCode)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", sbcd.Type))
	builder.WriteString(", ")
	builder.WriteString("in_batch_no=")
	builder.WriteString(sbcd.InBatchNo)
	builder.WriteString(", ")
	builder.WriteString("third_pay_type=")
	builder.WriteString(sbcd.ThirdPayType)
	builder.WriteString(", ")
	builder.WriteString("third_pay_organ=")
	builder.WriteString(sbcd.ThirdPayOrgan)
	builder.WriteString(", ")
	builder.WriteString("third_pay_no=")
	builder.WriteString(sbcd.ThirdPayNo)
	builder.WriteString(", ")
	builder.WriteString("bc_bind_acc_id=")
	builder.WriteString(fmt.Sprintf("%v", sbcd.BcBindAccID))
	builder.WriteString(", ")
	builder.WriteString("cash_account_no=")
	builder.WriteString(sbcd.CashAccountNo)
	builder.WriteString(", ")
	builder.WriteString("cash_principal=")
	builder.WriteString(sbcd.CashPrincipal)
	builder.WriteString(", ")
	builder.WriteString("cash_bank=")
	builder.WriteString(sbcd.CashBank)
	builder.WriteString(", ")
	builder.WriteString("transaction_no=")
	builder.WriteString(sbcd.TransactionNo)
	builder.WriteString(", ")
	builder.WriteString("transaction_at=")
	builder.WriteString(sbcd.TransactionAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("before_fee=")
	builder.WriteString(fmt.Sprintf("%v", sbcd.BeforeFee))
	builder.WriteString(", ")
	builder.WriteString("change_fee=")
	builder.WriteString(fmt.Sprintf("%v", sbcd.ChangeFee))
	builder.WriteString(", ")
	builder.WriteString("after_fee=")
	builder.WriteString(fmt.Sprintf("%v", sbcd.AfterFee))
	builder.WriteString(", ")
	builder.WriteString("operator_no=")
	builder.WriteString(sbcd.OperatorNo)
	builder.WriteString(", ")
	builder.WriteString("flow_no=")
	builder.WriteString(sbcd.FlowNo)
	builder.WriteString(", ")
	builder.WriteString("check_state=")
	builder.WriteString(fmt.Sprintf("%v", sbcd.CheckState))
	builder.WriteString(", ")
	builder.WriteString("check_at=")
	builder.WriteString(sbcd.CheckAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", sbcd.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sbcd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sbcd.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StoreBalanceChangeDetails is a parsable slice of StoreBalanceChangeDetail.
type StoreBalanceChangeDetails []*StoreBalanceChangeDetail

func (sbcd StoreBalanceChangeDetails) config(cfg config) {
	for _i := range sbcd {
		sbcd[_i].config = cfg
	}
}
