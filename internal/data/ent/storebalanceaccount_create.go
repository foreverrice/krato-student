// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"finance/internal/data/ent/storebalanceaccount"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreBalanceAccountCreate is the builder for creating a StoreBalanceAccount entity.
type StoreBalanceAccountCreate struct {
	config
	mutation *StoreBalanceAccountMutation
	hooks    []Hook
}

// SetAccountNo sets the "account_no" field.
func (sbac *StoreBalanceAccountCreate) SetAccountNo(s string) *StoreBalanceAccountCreate {
	sbac.mutation.SetAccountNo(s)
	return sbac
}

// SetNillableAccountNo sets the "account_no" field if the given value is not nil.
func (sbac *StoreBalanceAccountCreate) SetNillableAccountNo(s *string) *StoreBalanceAccountCreate {
	if s != nil {
		sbac.SetAccountNo(*s)
	}
	return sbac
}

// SetStoreCode sets the "store_code" field.
func (sbac *StoreBalanceAccountCreate) SetStoreCode(s string) *StoreBalanceAccountCreate {
	sbac.mutation.SetStoreCode(s)
	return sbac
}

// SetNillableStoreCode sets the "store_code" field if the given value is not nil.
func (sbac *StoreBalanceAccountCreate) SetNillableStoreCode(s *string) *StoreBalanceAccountCreate {
	if s != nil {
		sbac.SetStoreCode(*s)
	}
	return sbac
}

// SetUpperOrganNo sets the "upper_organ_no" field.
func (sbac *StoreBalanceAccountCreate) SetUpperOrganNo(s string) *StoreBalanceAccountCreate {
	sbac.mutation.SetUpperOrganNo(s)
	return sbac
}

// SetNillableUpperOrganNo sets the "upper_organ_no" field if the given value is not nil.
func (sbac *StoreBalanceAccountCreate) SetNillableUpperOrganNo(s *string) *StoreBalanceAccountCreate {
	if s != nil {
		sbac.SetUpperOrganNo(*s)
	}
	return sbac
}

// SetPwd sets the "pwd" field.
func (sbac *StoreBalanceAccountCreate) SetPwd(s string) *StoreBalanceAccountCreate {
	sbac.mutation.SetPwd(s)
	return sbac
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (sbac *StoreBalanceAccountCreate) SetNillablePwd(s *string) *StoreBalanceAccountCreate {
	if s != nil {
		sbac.SetPwd(*s)
	}
	return sbac
}

// SetPwdSalt sets the "pwd_salt" field.
func (sbac *StoreBalanceAccountCreate) SetPwdSalt(s string) *StoreBalanceAccountCreate {
	sbac.mutation.SetPwdSalt(s)
	return sbac
}

// SetNillablePwdSalt sets the "pwd_salt" field if the given value is not nil.
func (sbac *StoreBalanceAccountCreate) SetNillablePwdSalt(s *string) *StoreBalanceAccountCreate {
	if s != nil {
		sbac.SetPwdSalt(*s)
	}
	return sbac
}

// SetBalanceFee sets the "balance_fee" field.
func (sbac *StoreBalanceAccountCreate) SetBalanceFee(f float64) *StoreBalanceAccountCreate {
	sbac.mutation.SetBalanceFee(f)
	return sbac
}

// SetNillableBalanceFee sets the "balance_fee" field if the given value is not nil.
func (sbac *StoreBalanceAccountCreate) SetNillableBalanceFee(f *float64) *StoreBalanceAccountCreate {
	if f != nil {
		sbac.SetBalanceFee(*f)
	}
	return sbac
}

// SetTotalChargeFee sets the "total_charge_fee" field.
func (sbac *StoreBalanceAccountCreate) SetTotalChargeFee(f float64) *StoreBalanceAccountCreate {
	sbac.mutation.SetTotalChargeFee(f)
	return sbac
}

// SetNillableTotalChargeFee sets the "total_charge_fee" field if the given value is not nil.
func (sbac *StoreBalanceAccountCreate) SetNillableTotalChargeFee(f *float64) *StoreBalanceAccountCreate {
	if f != nil {
		sbac.SetTotalChargeFee(*f)
	}
	return sbac
}

// SetIsDeleted sets the "is_deleted" field.
func (sbac *StoreBalanceAccountCreate) SetIsDeleted(i int8) *StoreBalanceAccountCreate {
	sbac.mutation.SetIsDeleted(i)
	return sbac
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (sbac *StoreBalanceAccountCreate) SetNillableIsDeleted(i *int8) *StoreBalanceAccountCreate {
	if i != nil {
		sbac.SetIsDeleted(*i)
	}
	return sbac
}

// SetUpdatedAt sets the "updated_at" field.
func (sbac *StoreBalanceAccountCreate) SetUpdatedAt(t time.Time) *StoreBalanceAccountCreate {
	sbac.mutation.SetUpdatedAt(t)
	return sbac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sbac *StoreBalanceAccountCreate) SetNillableUpdatedAt(t *time.Time) *StoreBalanceAccountCreate {
	if t != nil {
		sbac.SetUpdatedAt(*t)
	}
	return sbac
}

// SetCreatedAt sets the "created_at" field.
func (sbac *StoreBalanceAccountCreate) SetCreatedAt(t time.Time) *StoreBalanceAccountCreate {
	sbac.mutation.SetCreatedAt(t)
	return sbac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sbac *StoreBalanceAccountCreate) SetNillableCreatedAt(t *time.Time) *StoreBalanceAccountCreate {
	if t != nil {
		sbac.SetCreatedAt(*t)
	}
	return sbac
}

// SetID sets the "id" field.
func (sbac *StoreBalanceAccountCreate) SetID(u uint32) *StoreBalanceAccountCreate {
	sbac.mutation.SetID(u)
	return sbac
}

// Mutation returns the StoreBalanceAccountMutation object of the builder.
func (sbac *StoreBalanceAccountCreate) Mutation() *StoreBalanceAccountMutation {
	return sbac.mutation
}

// Save creates the StoreBalanceAccount in the database.
func (sbac *StoreBalanceAccountCreate) Save(ctx context.Context) (*StoreBalanceAccount, error) {
	var (
		err  error
		node *StoreBalanceAccount
	)
	if len(sbac.hooks) == 0 {
		if err = sbac.check(); err != nil {
			return nil, err
		}
		node, err = sbac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoreBalanceAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sbac.check(); err != nil {
				return nil, err
			}
			sbac.mutation = mutation
			if node, err = sbac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sbac.hooks) - 1; i >= 0; i-- {
			if sbac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sbac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sbac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*StoreBalanceAccount)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StoreBalanceAccountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sbac *StoreBalanceAccountCreate) SaveX(ctx context.Context) *StoreBalanceAccount {
	v, err := sbac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbac *StoreBalanceAccountCreate) Exec(ctx context.Context) error {
	_, err := sbac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbac *StoreBalanceAccountCreate) ExecX(ctx context.Context) {
	if err := sbac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbac *StoreBalanceAccountCreate) check() error {
	return nil
}

func (sbac *StoreBalanceAccountCreate) sqlSave(ctx context.Context) (*StoreBalanceAccount, error) {
	_node, _spec := sbac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sbac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (sbac *StoreBalanceAccountCreate) createSpec() (*StoreBalanceAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &StoreBalanceAccount{config: sbac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: storebalanceaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: storebalanceaccount.FieldID,
			},
		}
	)
	if id, ok := sbac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sbac.mutation.AccountNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalanceaccount.FieldAccountNo,
		})
		_node.AccountNo = value
	}
	if value, ok := sbac.mutation.StoreCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalanceaccount.FieldStoreCode,
		})
		_node.StoreCode = value
	}
	if value, ok := sbac.mutation.UpperOrganNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalanceaccount.FieldUpperOrganNo,
		})
		_node.UpperOrganNo = value
	}
	if value, ok := sbac.mutation.Pwd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalanceaccount.FieldPwd,
		})
		_node.Pwd = value
	}
	if value, ok := sbac.mutation.PwdSalt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalanceaccount.FieldPwdSalt,
		})
		_node.PwdSalt = value
	}
	if value, ok := sbac.mutation.BalanceFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: storebalanceaccount.FieldBalanceFee,
		})
		_node.BalanceFee = value
	}
	if value, ok := sbac.mutation.TotalChargeFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: storebalanceaccount.FieldTotalChargeFee,
		})
		_node.TotalChargeFee = value
	}
	if value, ok := sbac.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: storebalanceaccount.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := sbac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storebalanceaccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sbac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storebalanceaccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	return _node, _spec
}

// StoreBalanceAccountCreateBulk is the builder for creating many StoreBalanceAccount entities in bulk.
type StoreBalanceAccountCreateBulk struct {
	config
	builders []*StoreBalanceAccountCreate
}

// Save creates the StoreBalanceAccount entities in the database.
func (sbacb *StoreBalanceAccountCreateBulk) Save(ctx context.Context) ([]*StoreBalanceAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sbacb.builders))
	nodes := make([]*StoreBalanceAccount, len(sbacb.builders))
	mutators := make([]Mutator, len(sbacb.builders))
	for i := range sbacb.builders {
		func(i int, root context.Context) {
			builder := sbacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreBalanceAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sbacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sbacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sbacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sbacb *StoreBalanceAccountCreateBulk) SaveX(ctx context.Context) []*StoreBalanceAccount {
	v, err := sbacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbacb *StoreBalanceAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := sbacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbacb *StoreBalanceAccountCreateBulk) ExecX(ctx context.Context) {
	if err := sbacb.Exec(ctx); err != nil {
		panic(err)
	}
}
