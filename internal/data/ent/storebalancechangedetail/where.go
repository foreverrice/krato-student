// Code generated by ent, DO NOT EDIT.

package storebalancechangedetail

import (
	"finance/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// StoreCode applies equality check predicate on the "store_code" field. It's identical to StoreCodeEQ.
func StoreCode(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreCode), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// InBatchNo applies equality check predicate on the "in_batch_no" field. It's identical to InBatchNoEQ.
func InBatchNo(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInBatchNo), v))
	})
}

// ThirdPayType applies equality check predicate on the "third_pay_type" field. It's identical to ThirdPayTypeEQ.
func ThirdPayType(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayOrgan applies equality check predicate on the "third_pay_organ" field. It's identical to ThirdPayOrganEQ.
func ThirdPayOrgan(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayNo applies equality check predicate on the "third_pay_no" field. It's identical to ThirdPayNoEQ.
func ThirdPayNo(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPayNo), v))
	})
}

// BcBindAccID applies equality check predicate on the "bc_bind_acc_id" field. It's identical to BcBindAccIDEQ.
func BcBindAccID(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBcBindAccID), v))
	})
}

// CashAccountNo applies equality check predicate on the "cash_account_no" field. It's identical to CashAccountNoEQ.
func CashAccountNo(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCashAccountNo), v))
	})
}

// CashPrincipal applies equality check predicate on the "cash_principal" field. It's identical to CashPrincipalEQ.
func CashPrincipal(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCashPrincipal), v))
	})
}

// CashBank applies equality check predicate on the "cash_bank" field. It's identical to CashBankEQ.
func CashBank(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCashBank), v))
	})
}

// TransactionNo applies equality check predicate on the "transaction_no" field. It's identical to TransactionNoEQ.
func TransactionNo(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionNo), v))
	})
}

// TransactionAt applies equality check predicate on the "transaction_at" field. It's identical to TransactionAtEQ.
func TransactionAt(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionAt), v))
	})
}

// BeforeFee applies equality check predicate on the "before_fee" field. It's identical to BeforeFeeEQ.
func BeforeFee(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeforeFee), v))
	})
}

// ChangeFee applies equality check predicate on the "change_fee" field. It's identical to ChangeFeeEQ.
func ChangeFee(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeFee), v))
	})
}

// AfterFee applies equality check predicate on the "after_fee" field. It's identical to AfterFeeEQ.
func AfterFee(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAfterFee), v))
	})
}

// OperatorNo applies equality check predicate on the "operator_no" field. It's identical to OperatorNoEQ.
func OperatorNo(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperatorNo), v))
	})
}

// FlowNo applies equality check predicate on the "flow_no" field. It's identical to FlowNoEQ.
func FlowNo(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowNo), v))
	})
}

// CheckState applies equality check predicate on the "check_state" field. It's identical to CheckStateEQ.
func CheckState(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckState), v))
	})
}

// CheckAt applies equality check predicate on the "check_at" field. It's identical to CheckAtEQ.
func CheckAt(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckAt), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int32) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int32) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// StoreCodeEQ applies the EQ predicate on the "store_code" field.
func StoreCodeEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreCode), v))
	})
}

// StoreCodeNEQ applies the NEQ predicate on the "store_code" field.
func StoreCodeNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreCode), v))
	})
}

// StoreCodeIn applies the In predicate on the "store_code" field.
func StoreCodeIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreCode), v...))
	})
}

// StoreCodeNotIn applies the NotIn predicate on the "store_code" field.
func StoreCodeNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreCode), v...))
	})
}

// StoreCodeGT applies the GT predicate on the "store_code" field.
func StoreCodeGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreCode), v))
	})
}

// StoreCodeGTE applies the GTE predicate on the "store_code" field.
func StoreCodeGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreCode), v))
	})
}

// StoreCodeLT applies the LT predicate on the "store_code" field.
func StoreCodeLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreCode), v))
	})
}

// StoreCodeLTE applies the LTE predicate on the "store_code" field.
func StoreCodeLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreCode), v))
	})
}

// StoreCodeContains applies the Contains predicate on the "store_code" field.
func StoreCodeContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStoreCode), v))
	})
}

// StoreCodeHasPrefix applies the HasPrefix predicate on the "store_code" field.
func StoreCodeHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStoreCode), v))
	})
}

// StoreCodeHasSuffix applies the HasSuffix predicate on the "store_code" field.
func StoreCodeHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStoreCode), v))
	})
}

// StoreCodeEqualFold applies the EqualFold predicate on the "store_code" field.
func StoreCodeEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStoreCode), v))
	})
}

// StoreCodeContainsFold applies the ContainsFold predicate on the "store_code" field.
func StoreCodeContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStoreCode), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int8) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int8) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// InBatchNoEQ applies the EQ predicate on the "in_batch_no" field.
func InBatchNoEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInBatchNo), v))
	})
}

// InBatchNoNEQ applies the NEQ predicate on the "in_batch_no" field.
func InBatchNoNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInBatchNo), v))
	})
}

// InBatchNoIn applies the In predicate on the "in_batch_no" field.
func InBatchNoIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInBatchNo), v...))
	})
}

// InBatchNoNotIn applies the NotIn predicate on the "in_batch_no" field.
func InBatchNoNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInBatchNo), v...))
	})
}

// InBatchNoGT applies the GT predicate on the "in_batch_no" field.
func InBatchNoGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInBatchNo), v))
	})
}

// InBatchNoGTE applies the GTE predicate on the "in_batch_no" field.
func InBatchNoGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInBatchNo), v))
	})
}

// InBatchNoLT applies the LT predicate on the "in_batch_no" field.
func InBatchNoLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInBatchNo), v))
	})
}

// InBatchNoLTE applies the LTE predicate on the "in_batch_no" field.
func InBatchNoLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInBatchNo), v))
	})
}

// InBatchNoContains applies the Contains predicate on the "in_batch_no" field.
func InBatchNoContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInBatchNo), v))
	})
}

// InBatchNoHasPrefix applies the HasPrefix predicate on the "in_batch_no" field.
func InBatchNoHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInBatchNo), v))
	})
}

// InBatchNoHasSuffix applies the HasSuffix predicate on the "in_batch_no" field.
func InBatchNoHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInBatchNo), v))
	})
}

// InBatchNoEqualFold applies the EqualFold predicate on the "in_batch_no" field.
func InBatchNoEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInBatchNo), v))
	})
}

// InBatchNoContainsFold applies the ContainsFold predicate on the "in_batch_no" field.
func InBatchNoContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInBatchNo), v))
	})
}

// ThirdPayTypeEQ applies the EQ predicate on the "third_pay_type" field.
func ThirdPayTypeEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayTypeNEQ applies the NEQ predicate on the "third_pay_type" field.
func ThirdPayTypeNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayTypeIn applies the In predicate on the "third_pay_type" field.
func ThirdPayTypeIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThirdPayType), v...))
	})
}

// ThirdPayTypeNotIn applies the NotIn predicate on the "third_pay_type" field.
func ThirdPayTypeNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThirdPayType), v...))
	})
}

// ThirdPayTypeGT applies the GT predicate on the "third_pay_type" field.
func ThirdPayTypeGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayTypeGTE applies the GTE predicate on the "third_pay_type" field.
func ThirdPayTypeGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayTypeLT applies the LT predicate on the "third_pay_type" field.
func ThirdPayTypeLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayTypeLTE applies the LTE predicate on the "third_pay_type" field.
func ThirdPayTypeLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayTypeContains applies the Contains predicate on the "third_pay_type" field.
func ThirdPayTypeContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayTypeHasPrefix applies the HasPrefix predicate on the "third_pay_type" field.
func ThirdPayTypeHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayTypeHasSuffix applies the HasSuffix predicate on the "third_pay_type" field.
func ThirdPayTypeHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayTypeEqualFold applies the EqualFold predicate on the "third_pay_type" field.
func ThirdPayTypeEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayTypeContainsFold applies the ContainsFold predicate on the "third_pay_type" field.
func ThirdPayTypeContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdPayType), v))
	})
}

// ThirdPayOrganEQ applies the EQ predicate on the "third_pay_organ" field.
func ThirdPayOrganEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayOrganNEQ applies the NEQ predicate on the "third_pay_organ" field.
func ThirdPayOrganNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayOrganIn applies the In predicate on the "third_pay_organ" field.
func ThirdPayOrganIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThirdPayOrgan), v...))
	})
}

// ThirdPayOrganNotIn applies the NotIn predicate on the "third_pay_organ" field.
func ThirdPayOrganNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThirdPayOrgan), v...))
	})
}

// ThirdPayOrganGT applies the GT predicate on the "third_pay_organ" field.
func ThirdPayOrganGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayOrganGTE applies the GTE predicate on the "third_pay_organ" field.
func ThirdPayOrganGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayOrganLT applies the LT predicate on the "third_pay_organ" field.
func ThirdPayOrganLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayOrganLTE applies the LTE predicate on the "third_pay_organ" field.
func ThirdPayOrganLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayOrganContains applies the Contains predicate on the "third_pay_organ" field.
func ThirdPayOrganContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayOrganHasPrefix applies the HasPrefix predicate on the "third_pay_organ" field.
func ThirdPayOrganHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayOrganHasSuffix applies the HasSuffix predicate on the "third_pay_organ" field.
func ThirdPayOrganHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayOrganEqualFold applies the EqualFold predicate on the "third_pay_organ" field.
func ThirdPayOrganEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayOrganContainsFold applies the ContainsFold predicate on the "third_pay_organ" field.
func ThirdPayOrganContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdPayOrgan), v))
	})
}

// ThirdPayNoEQ applies the EQ predicate on the "third_pay_no" field.
func ThirdPayNoEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPayNo), v))
	})
}

// ThirdPayNoNEQ applies the NEQ predicate on the "third_pay_no" field.
func ThirdPayNoNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdPayNo), v))
	})
}

// ThirdPayNoIn applies the In predicate on the "third_pay_no" field.
func ThirdPayNoIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThirdPayNo), v...))
	})
}

// ThirdPayNoNotIn applies the NotIn predicate on the "third_pay_no" field.
func ThirdPayNoNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThirdPayNo), v...))
	})
}

// ThirdPayNoGT applies the GT predicate on the "third_pay_no" field.
func ThirdPayNoGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdPayNo), v))
	})
}

// ThirdPayNoGTE applies the GTE predicate on the "third_pay_no" field.
func ThirdPayNoGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdPayNo), v))
	})
}

// ThirdPayNoLT applies the LT predicate on the "third_pay_no" field.
func ThirdPayNoLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdPayNo), v))
	})
}

// ThirdPayNoLTE applies the LTE predicate on the "third_pay_no" field.
func ThirdPayNoLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdPayNo), v))
	})
}

// ThirdPayNoContains applies the Contains predicate on the "third_pay_no" field.
func ThirdPayNoContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdPayNo), v))
	})
}

// ThirdPayNoHasPrefix applies the HasPrefix predicate on the "third_pay_no" field.
func ThirdPayNoHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdPayNo), v))
	})
}

// ThirdPayNoHasSuffix applies the HasSuffix predicate on the "third_pay_no" field.
func ThirdPayNoHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdPayNo), v))
	})
}

// ThirdPayNoEqualFold applies the EqualFold predicate on the "third_pay_no" field.
func ThirdPayNoEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdPayNo), v))
	})
}

// ThirdPayNoContainsFold applies the ContainsFold predicate on the "third_pay_no" field.
func ThirdPayNoContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdPayNo), v))
	})
}

// BcBindAccIDEQ applies the EQ predicate on the "bc_bind_acc_id" field.
func BcBindAccIDEQ(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBcBindAccID), v))
	})
}

// BcBindAccIDNEQ applies the NEQ predicate on the "bc_bind_acc_id" field.
func BcBindAccIDNEQ(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBcBindAccID), v))
	})
}

// BcBindAccIDIn applies the In predicate on the "bc_bind_acc_id" field.
func BcBindAccIDIn(vs ...int32) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBcBindAccID), v...))
	})
}

// BcBindAccIDNotIn applies the NotIn predicate on the "bc_bind_acc_id" field.
func BcBindAccIDNotIn(vs ...int32) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBcBindAccID), v...))
	})
}

// BcBindAccIDGT applies the GT predicate on the "bc_bind_acc_id" field.
func BcBindAccIDGT(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBcBindAccID), v))
	})
}

// BcBindAccIDGTE applies the GTE predicate on the "bc_bind_acc_id" field.
func BcBindAccIDGTE(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBcBindAccID), v))
	})
}

// BcBindAccIDLT applies the LT predicate on the "bc_bind_acc_id" field.
func BcBindAccIDLT(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBcBindAccID), v))
	})
}

// BcBindAccIDLTE applies the LTE predicate on the "bc_bind_acc_id" field.
func BcBindAccIDLTE(v int32) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBcBindAccID), v))
	})
}

// CashAccountNoEQ applies the EQ predicate on the "cash_account_no" field.
func CashAccountNoEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCashAccountNo), v))
	})
}

// CashAccountNoNEQ applies the NEQ predicate on the "cash_account_no" field.
func CashAccountNoNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCashAccountNo), v))
	})
}

// CashAccountNoIn applies the In predicate on the "cash_account_no" field.
func CashAccountNoIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCashAccountNo), v...))
	})
}

// CashAccountNoNotIn applies the NotIn predicate on the "cash_account_no" field.
func CashAccountNoNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCashAccountNo), v...))
	})
}

// CashAccountNoGT applies the GT predicate on the "cash_account_no" field.
func CashAccountNoGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCashAccountNo), v))
	})
}

// CashAccountNoGTE applies the GTE predicate on the "cash_account_no" field.
func CashAccountNoGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCashAccountNo), v))
	})
}

// CashAccountNoLT applies the LT predicate on the "cash_account_no" field.
func CashAccountNoLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCashAccountNo), v))
	})
}

// CashAccountNoLTE applies the LTE predicate on the "cash_account_no" field.
func CashAccountNoLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCashAccountNo), v))
	})
}

// CashAccountNoContains applies the Contains predicate on the "cash_account_no" field.
func CashAccountNoContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCashAccountNo), v))
	})
}

// CashAccountNoHasPrefix applies the HasPrefix predicate on the "cash_account_no" field.
func CashAccountNoHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCashAccountNo), v))
	})
}

// CashAccountNoHasSuffix applies the HasSuffix predicate on the "cash_account_no" field.
func CashAccountNoHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCashAccountNo), v))
	})
}

// CashAccountNoEqualFold applies the EqualFold predicate on the "cash_account_no" field.
func CashAccountNoEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCashAccountNo), v))
	})
}

// CashAccountNoContainsFold applies the ContainsFold predicate on the "cash_account_no" field.
func CashAccountNoContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCashAccountNo), v))
	})
}

// CashPrincipalEQ applies the EQ predicate on the "cash_principal" field.
func CashPrincipalEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCashPrincipal), v))
	})
}

// CashPrincipalNEQ applies the NEQ predicate on the "cash_principal" field.
func CashPrincipalNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCashPrincipal), v))
	})
}

// CashPrincipalIn applies the In predicate on the "cash_principal" field.
func CashPrincipalIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCashPrincipal), v...))
	})
}

// CashPrincipalNotIn applies the NotIn predicate on the "cash_principal" field.
func CashPrincipalNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCashPrincipal), v...))
	})
}

// CashPrincipalGT applies the GT predicate on the "cash_principal" field.
func CashPrincipalGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCashPrincipal), v))
	})
}

// CashPrincipalGTE applies the GTE predicate on the "cash_principal" field.
func CashPrincipalGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCashPrincipal), v))
	})
}

// CashPrincipalLT applies the LT predicate on the "cash_principal" field.
func CashPrincipalLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCashPrincipal), v))
	})
}

// CashPrincipalLTE applies the LTE predicate on the "cash_principal" field.
func CashPrincipalLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCashPrincipal), v))
	})
}

// CashPrincipalContains applies the Contains predicate on the "cash_principal" field.
func CashPrincipalContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCashPrincipal), v))
	})
}

// CashPrincipalHasPrefix applies the HasPrefix predicate on the "cash_principal" field.
func CashPrincipalHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCashPrincipal), v))
	})
}

// CashPrincipalHasSuffix applies the HasSuffix predicate on the "cash_principal" field.
func CashPrincipalHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCashPrincipal), v))
	})
}

// CashPrincipalEqualFold applies the EqualFold predicate on the "cash_principal" field.
func CashPrincipalEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCashPrincipal), v))
	})
}

// CashPrincipalContainsFold applies the ContainsFold predicate on the "cash_principal" field.
func CashPrincipalContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCashPrincipal), v))
	})
}

// CashBankEQ applies the EQ predicate on the "cash_bank" field.
func CashBankEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCashBank), v))
	})
}

// CashBankNEQ applies the NEQ predicate on the "cash_bank" field.
func CashBankNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCashBank), v))
	})
}

// CashBankIn applies the In predicate on the "cash_bank" field.
func CashBankIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCashBank), v...))
	})
}

// CashBankNotIn applies the NotIn predicate on the "cash_bank" field.
func CashBankNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCashBank), v...))
	})
}

// CashBankGT applies the GT predicate on the "cash_bank" field.
func CashBankGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCashBank), v))
	})
}

// CashBankGTE applies the GTE predicate on the "cash_bank" field.
func CashBankGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCashBank), v))
	})
}

// CashBankLT applies the LT predicate on the "cash_bank" field.
func CashBankLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCashBank), v))
	})
}

// CashBankLTE applies the LTE predicate on the "cash_bank" field.
func CashBankLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCashBank), v))
	})
}

// CashBankContains applies the Contains predicate on the "cash_bank" field.
func CashBankContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCashBank), v))
	})
}

// CashBankHasPrefix applies the HasPrefix predicate on the "cash_bank" field.
func CashBankHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCashBank), v))
	})
}

// CashBankHasSuffix applies the HasSuffix predicate on the "cash_bank" field.
func CashBankHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCashBank), v))
	})
}

// CashBankEqualFold applies the EqualFold predicate on the "cash_bank" field.
func CashBankEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCashBank), v))
	})
}

// CashBankContainsFold applies the ContainsFold predicate on the "cash_bank" field.
func CashBankContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCashBank), v))
	})
}

// TransactionNoEQ applies the EQ predicate on the "transaction_no" field.
func TransactionNoEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionNo), v))
	})
}

// TransactionNoNEQ applies the NEQ predicate on the "transaction_no" field.
func TransactionNoNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionNo), v))
	})
}

// TransactionNoIn applies the In predicate on the "transaction_no" field.
func TransactionNoIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionNo), v...))
	})
}

// TransactionNoNotIn applies the NotIn predicate on the "transaction_no" field.
func TransactionNoNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionNo), v...))
	})
}

// TransactionNoGT applies the GT predicate on the "transaction_no" field.
func TransactionNoGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionNo), v))
	})
}

// TransactionNoGTE applies the GTE predicate on the "transaction_no" field.
func TransactionNoGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionNo), v))
	})
}

// TransactionNoLT applies the LT predicate on the "transaction_no" field.
func TransactionNoLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionNo), v))
	})
}

// TransactionNoLTE applies the LTE predicate on the "transaction_no" field.
func TransactionNoLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionNo), v))
	})
}

// TransactionNoContains applies the Contains predicate on the "transaction_no" field.
func TransactionNoContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionNo), v))
	})
}

// TransactionNoHasPrefix applies the HasPrefix predicate on the "transaction_no" field.
func TransactionNoHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionNo), v))
	})
}

// TransactionNoHasSuffix applies the HasSuffix predicate on the "transaction_no" field.
func TransactionNoHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionNo), v))
	})
}

// TransactionNoEqualFold applies the EqualFold predicate on the "transaction_no" field.
func TransactionNoEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionNo), v))
	})
}

// TransactionNoContainsFold applies the ContainsFold predicate on the "transaction_no" field.
func TransactionNoContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionNo), v))
	})
}

// TransactionAtEQ applies the EQ predicate on the "transaction_at" field.
func TransactionAtEQ(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionAt), v))
	})
}

// TransactionAtNEQ applies the NEQ predicate on the "transaction_at" field.
func TransactionAtNEQ(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionAt), v))
	})
}

// TransactionAtIn applies the In predicate on the "transaction_at" field.
func TransactionAtIn(vs ...time.Time) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionAt), v...))
	})
}

// TransactionAtNotIn applies the NotIn predicate on the "transaction_at" field.
func TransactionAtNotIn(vs ...time.Time) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionAt), v...))
	})
}

// TransactionAtGT applies the GT predicate on the "transaction_at" field.
func TransactionAtGT(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionAt), v))
	})
}

// TransactionAtGTE applies the GTE predicate on the "transaction_at" field.
func TransactionAtGTE(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionAt), v))
	})
}

// TransactionAtLT applies the LT predicate on the "transaction_at" field.
func TransactionAtLT(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionAt), v))
	})
}

// TransactionAtLTE applies the LTE predicate on the "transaction_at" field.
func TransactionAtLTE(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionAt), v))
	})
}

// BeforeFeeEQ applies the EQ predicate on the "before_fee" field.
func BeforeFeeEQ(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeforeFee), v))
	})
}

// BeforeFeeNEQ applies the NEQ predicate on the "before_fee" field.
func BeforeFeeNEQ(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBeforeFee), v))
	})
}

// BeforeFeeIn applies the In predicate on the "before_fee" field.
func BeforeFeeIn(vs ...float64) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBeforeFee), v...))
	})
}

// BeforeFeeNotIn applies the NotIn predicate on the "before_fee" field.
func BeforeFeeNotIn(vs ...float64) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBeforeFee), v...))
	})
}

// BeforeFeeGT applies the GT predicate on the "before_fee" field.
func BeforeFeeGT(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBeforeFee), v))
	})
}

// BeforeFeeGTE applies the GTE predicate on the "before_fee" field.
func BeforeFeeGTE(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBeforeFee), v))
	})
}

// BeforeFeeLT applies the LT predicate on the "before_fee" field.
func BeforeFeeLT(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBeforeFee), v))
	})
}

// BeforeFeeLTE applies the LTE predicate on the "before_fee" field.
func BeforeFeeLTE(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBeforeFee), v))
	})
}

// ChangeFeeEQ applies the EQ predicate on the "change_fee" field.
func ChangeFeeEQ(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeFee), v))
	})
}

// ChangeFeeNEQ applies the NEQ predicate on the "change_fee" field.
func ChangeFeeNEQ(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChangeFee), v))
	})
}

// ChangeFeeIn applies the In predicate on the "change_fee" field.
func ChangeFeeIn(vs ...float64) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChangeFee), v...))
	})
}

// ChangeFeeNotIn applies the NotIn predicate on the "change_fee" field.
func ChangeFeeNotIn(vs ...float64) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChangeFee), v...))
	})
}

// ChangeFeeGT applies the GT predicate on the "change_fee" field.
func ChangeFeeGT(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChangeFee), v))
	})
}

// ChangeFeeGTE applies the GTE predicate on the "change_fee" field.
func ChangeFeeGTE(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChangeFee), v))
	})
}

// ChangeFeeLT applies the LT predicate on the "change_fee" field.
func ChangeFeeLT(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChangeFee), v))
	})
}

// ChangeFeeLTE applies the LTE predicate on the "change_fee" field.
func ChangeFeeLTE(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChangeFee), v))
	})
}

// AfterFeeEQ applies the EQ predicate on the "after_fee" field.
func AfterFeeEQ(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAfterFee), v))
	})
}

// AfterFeeNEQ applies the NEQ predicate on the "after_fee" field.
func AfterFeeNEQ(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAfterFee), v))
	})
}

// AfterFeeIn applies the In predicate on the "after_fee" field.
func AfterFeeIn(vs ...float64) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAfterFee), v...))
	})
}

// AfterFeeNotIn applies the NotIn predicate on the "after_fee" field.
func AfterFeeNotIn(vs ...float64) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAfterFee), v...))
	})
}

// AfterFeeGT applies the GT predicate on the "after_fee" field.
func AfterFeeGT(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAfterFee), v))
	})
}

// AfterFeeGTE applies the GTE predicate on the "after_fee" field.
func AfterFeeGTE(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAfterFee), v))
	})
}

// AfterFeeLT applies the LT predicate on the "after_fee" field.
func AfterFeeLT(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAfterFee), v))
	})
}

// AfterFeeLTE applies the LTE predicate on the "after_fee" field.
func AfterFeeLTE(v float64) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAfterFee), v))
	})
}

// OperatorNoEQ applies the EQ predicate on the "operator_no" field.
func OperatorNoEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperatorNo), v))
	})
}

// OperatorNoNEQ applies the NEQ predicate on the "operator_no" field.
func OperatorNoNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperatorNo), v))
	})
}

// OperatorNoIn applies the In predicate on the "operator_no" field.
func OperatorNoIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOperatorNo), v...))
	})
}

// OperatorNoNotIn applies the NotIn predicate on the "operator_no" field.
func OperatorNoNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOperatorNo), v...))
	})
}

// OperatorNoGT applies the GT predicate on the "operator_no" field.
func OperatorNoGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperatorNo), v))
	})
}

// OperatorNoGTE applies the GTE predicate on the "operator_no" field.
func OperatorNoGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperatorNo), v))
	})
}

// OperatorNoLT applies the LT predicate on the "operator_no" field.
func OperatorNoLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperatorNo), v))
	})
}

// OperatorNoLTE applies the LTE predicate on the "operator_no" field.
func OperatorNoLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperatorNo), v))
	})
}

// OperatorNoContains applies the Contains predicate on the "operator_no" field.
func OperatorNoContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOperatorNo), v))
	})
}

// OperatorNoHasPrefix applies the HasPrefix predicate on the "operator_no" field.
func OperatorNoHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOperatorNo), v))
	})
}

// OperatorNoHasSuffix applies the HasSuffix predicate on the "operator_no" field.
func OperatorNoHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOperatorNo), v))
	})
}

// OperatorNoEqualFold applies the EqualFold predicate on the "operator_no" field.
func OperatorNoEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOperatorNo), v))
	})
}

// OperatorNoContainsFold applies the ContainsFold predicate on the "operator_no" field.
func OperatorNoContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOperatorNo), v))
	})
}

// FlowNoEQ applies the EQ predicate on the "flow_no" field.
func FlowNoEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowNo), v))
	})
}

// FlowNoNEQ applies the NEQ predicate on the "flow_no" field.
func FlowNoNEQ(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlowNo), v))
	})
}

// FlowNoIn applies the In predicate on the "flow_no" field.
func FlowNoIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFlowNo), v...))
	})
}

// FlowNoNotIn applies the NotIn predicate on the "flow_no" field.
func FlowNoNotIn(vs ...string) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFlowNo), v...))
	})
}

// FlowNoGT applies the GT predicate on the "flow_no" field.
func FlowNoGT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlowNo), v))
	})
}

// FlowNoGTE applies the GTE predicate on the "flow_no" field.
func FlowNoGTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlowNo), v))
	})
}

// FlowNoLT applies the LT predicate on the "flow_no" field.
func FlowNoLT(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlowNo), v))
	})
}

// FlowNoLTE applies the LTE predicate on the "flow_no" field.
func FlowNoLTE(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlowNo), v))
	})
}

// FlowNoContains applies the Contains predicate on the "flow_no" field.
func FlowNoContains(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFlowNo), v))
	})
}

// FlowNoHasPrefix applies the HasPrefix predicate on the "flow_no" field.
func FlowNoHasPrefix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFlowNo), v))
	})
}

// FlowNoHasSuffix applies the HasSuffix predicate on the "flow_no" field.
func FlowNoHasSuffix(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFlowNo), v))
	})
}

// FlowNoEqualFold applies the EqualFold predicate on the "flow_no" field.
func FlowNoEqualFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFlowNo), v))
	})
}

// FlowNoContainsFold applies the ContainsFold predicate on the "flow_no" field.
func FlowNoContainsFold(v string) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFlowNo), v))
	})
}

// CheckStateEQ applies the EQ predicate on the "check_state" field.
func CheckStateEQ(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckState), v))
	})
}

// CheckStateNEQ applies the NEQ predicate on the "check_state" field.
func CheckStateNEQ(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckState), v))
	})
}

// CheckStateIn applies the In predicate on the "check_state" field.
func CheckStateIn(vs ...int8) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCheckState), v...))
	})
}

// CheckStateNotIn applies the NotIn predicate on the "check_state" field.
func CheckStateNotIn(vs ...int8) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCheckState), v...))
	})
}

// CheckStateGT applies the GT predicate on the "check_state" field.
func CheckStateGT(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckState), v))
	})
}

// CheckStateGTE applies the GTE predicate on the "check_state" field.
func CheckStateGTE(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckState), v))
	})
}

// CheckStateLT applies the LT predicate on the "check_state" field.
func CheckStateLT(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckState), v))
	})
}

// CheckStateLTE applies the LTE predicate on the "check_state" field.
func CheckStateLTE(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckState), v))
	})
}

// CheckAtEQ applies the EQ predicate on the "check_at" field.
func CheckAtEQ(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckAt), v))
	})
}

// CheckAtNEQ applies the NEQ predicate on the "check_at" field.
func CheckAtNEQ(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckAt), v))
	})
}

// CheckAtIn applies the In predicate on the "check_at" field.
func CheckAtIn(vs ...time.Time) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCheckAt), v...))
	})
}

// CheckAtNotIn applies the NotIn predicate on the "check_at" field.
func CheckAtNotIn(vs ...time.Time) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCheckAt), v...))
	})
}

// CheckAtGT applies the GT predicate on the "check_at" field.
func CheckAtGT(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckAt), v))
	})
}

// CheckAtGTE applies the GTE predicate on the "check_at" field.
func CheckAtGTE(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckAt), v))
	})
}

// CheckAtLT applies the LT predicate on the "check_at" field.
func CheckAtLT(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckAt), v))
	})
}

// CheckAtLTE applies the LTE predicate on the "check_at" field.
func CheckAtLTE(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckAt), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int8) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int8) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int8) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StoreBalanceChangeDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StoreBalanceChangeDetail) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StoreBalanceChangeDetail) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StoreBalanceChangeDetail) predicate.StoreBalanceChangeDetail {
	return predicate.StoreBalanceChangeDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
