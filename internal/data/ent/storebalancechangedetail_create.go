// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"finance/internal/data/ent/storebalancechangedetail"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoreBalanceChangeDetailCreate is the builder for creating a StoreBalanceChangeDetail entity.
type StoreBalanceChangeDetailCreate struct {
	config
	mutation *StoreBalanceChangeDetailMutation
	hooks    []Hook
}

// SetAccountID sets the "account_id" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetAccountID(i int32) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetAccountID(i)
	return sbcdc
}

// SetStoreCode sets the "store_code" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetStoreCode(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetStoreCode(s)
	return sbcdc
}

// SetType sets the "type" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetType(i int8) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetType(i)
	return sbcdc
}

// SetInBatchNo sets the "in_batch_no" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetInBatchNo(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetInBatchNo(s)
	return sbcdc
}

// SetThirdPayType sets the "third_pay_type" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetThirdPayType(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetThirdPayType(s)
	return sbcdc
}

// SetThirdPayOrgan sets the "third_pay_organ" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetThirdPayOrgan(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetThirdPayOrgan(s)
	return sbcdc
}

// SetThirdPayNo sets the "third_pay_no" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetThirdPayNo(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetThirdPayNo(s)
	return sbcdc
}

// SetBcBindAccID sets the "bc_bind_acc_id" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetBcBindAccID(i int32) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetBcBindAccID(i)
	return sbcdc
}

// SetCashAccountNo sets the "cash_account_no" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetCashAccountNo(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetCashAccountNo(s)
	return sbcdc
}

// SetCashPrincipal sets the "cash_principal" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetCashPrincipal(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetCashPrincipal(s)
	return sbcdc
}

// SetCashBank sets the "cash_bank" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetCashBank(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetCashBank(s)
	return sbcdc
}

// SetTransactionNo sets the "transaction_no" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetTransactionNo(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetTransactionNo(s)
	return sbcdc
}

// SetTransactionAt sets the "transaction_at" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetTransactionAt(t time.Time) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetTransactionAt(t)
	return sbcdc
}

// SetBeforeFee sets the "before_fee" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetBeforeFee(f float64) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetBeforeFee(f)
	return sbcdc
}

// SetChangeFee sets the "change_fee" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetChangeFee(f float64) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetChangeFee(f)
	return sbcdc
}

// SetAfterFee sets the "after_fee" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetAfterFee(f float64) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetAfterFee(f)
	return sbcdc
}

// SetOperatorNo sets the "operator_no" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetOperatorNo(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetOperatorNo(s)
	return sbcdc
}

// SetFlowNo sets the "flow_no" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetFlowNo(s string) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetFlowNo(s)
	return sbcdc
}

// SetCheckState sets the "check_state" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetCheckState(i int8) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetCheckState(i)
	return sbcdc
}

// SetCheckAt sets the "check_at" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetCheckAt(t time.Time) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetCheckAt(t)
	return sbcdc
}

// SetIsDeleted sets the "is_deleted" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetIsDeleted(i int8) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetIsDeleted(i)
	return sbcdc
}

// SetUpdatedAt sets the "updated_at" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetUpdatedAt(t time.Time) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetUpdatedAt(t)
	return sbcdc
}

// SetCreatedAt sets the "created_at" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetCreatedAt(t time.Time) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetCreatedAt(t)
	return sbcdc
}

// SetID sets the "id" field.
func (sbcdc *StoreBalanceChangeDetailCreate) SetID(u uint32) *StoreBalanceChangeDetailCreate {
	sbcdc.mutation.SetID(u)
	return sbcdc
}

// Mutation returns the StoreBalanceChangeDetailMutation object of the builder.
func (sbcdc *StoreBalanceChangeDetailCreate) Mutation() *StoreBalanceChangeDetailMutation {
	return sbcdc.mutation
}

// Save creates the StoreBalanceChangeDetail in the database.
func (sbcdc *StoreBalanceChangeDetailCreate) Save(ctx context.Context) (*StoreBalanceChangeDetail, error) {
	var (
		err  error
		node *StoreBalanceChangeDetail
	)
	if len(sbcdc.hooks) == 0 {
		if err = sbcdc.check(); err != nil {
			return nil, err
		}
		node, err = sbcdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoreBalanceChangeDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sbcdc.check(); err != nil {
				return nil, err
			}
			sbcdc.mutation = mutation
			if node, err = sbcdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sbcdc.hooks) - 1; i >= 0; i-- {
			if sbcdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sbcdc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sbcdc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*StoreBalanceChangeDetail)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StoreBalanceChangeDetailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sbcdc *StoreBalanceChangeDetailCreate) SaveX(ctx context.Context) *StoreBalanceChangeDetail {
	v, err := sbcdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbcdc *StoreBalanceChangeDetailCreate) Exec(ctx context.Context) error {
	_, err := sbcdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbcdc *StoreBalanceChangeDetailCreate) ExecX(ctx context.Context) {
	if err := sbcdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbcdc *StoreBalanceChangeDetailCreate) check() error {
	if _, ok := sbcdc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.account_id"`)}
	}
	if _, ok := sbcdc.mutation.StoreCode(); !ok {
		return &ValidationError{Name: "store_code", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.store_code"`)}
	}
	if _, ok := sbcdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.type"`)}
	}
	if _, ok := sbcdc.mutation.InBatchNo(); !ok {
		return &ValidationError{Name: "in_batch_no", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.in_batch_no"`)}
	}
	if _, ok := sbcdc.mutation.ThirdPayType(); !ok {
		return &ValidationError{Name: "third_pay_type", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.third_pay_type"`)}
	}
	if _, ok := sbcdc.mutation.ThirdPayOrgan(); !ok {
		return &ValidationError{Name: "third_pay_organ", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.third_pay_organ"`)}
	}
	if _, ok := sbcdc.mutation.ThirdPayNo(); !ok {
		return &ValidationError{Name: "third_pay_no", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.third_pay_no"`)}
	}
	if _, ok := sbcdc.mutation.BcBindAccID(); !ok {
		return &ValidationError{Name: "bc_bind_acc_id", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.bc_bind_acc_id"`)}
	}
	if _, ok := sbcdc.mutation.CashAccountNo(); !ok {
		return &ValidationError{Name: "cash_account_no", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.cash_account_no"`)}
	}
	if _, ok := sbcdc.mutation.CashPrincipal(); !ok {
		return &ValidationError{Name: "cash_principal", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.cash_principal"`)}
	}
	if _, ok := sbcdc.mutation.CashBank(); !ok {
		return &ValidationError{Name: "cash_bank", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.cash_bank"`)}
	}
	if _, ok := sbcdc.mutation.TransactionNo(); !ok {
		return &ValidationError{Name: "transaction_no", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.transaction_no"`)}
	}
	if _, ok := sbcdc.mutation.TransactionAt(); !ok {
		return &ValidationError{Name: "transaction_at", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.transaction_at"`)}
	}
	if _, ok := sbcdc.mutation.BeforeFee(); !ok {
		return &ValidationError{Name: "before_fee", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.before_fee"`)}
	}
	if _, ok := sbcdc.mutation.ChangeFee(); !ok {
		return &ValidationError{Name: "change_fee", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.change_fee"`)}
	}
	if _, ok := sbcdc.mutation.AfterFee(); !ok {
		return &ValidationError{Name: "after_fee", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.after_fee"`)}
	}
	if _, ok := sbcdc.mutation.OperatorNo(); !ok {
		return &ValidationError{Name: "operator_no", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.operator_no"`)}
	}
	if _, ok := sbcdc.mutation.FlowNo(); !ok {
		return &ValidationError{Name: "flow_no", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.flow_no"`)}
	}
	if _, ok := sbcdc.mutation.CheckState(); !ok {
		return &ValidationError{Name: "check_state", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.check_state"`)}
	}
	if _, ok := sbcdc.mutation.CheckAt(); !ok {
		return &ValidationError{Name: "check_at", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.check_at"`)}
	}
	if _, ok := sbcdc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.is_deleted"`)}
	}
	if _, ok := sbcdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.updated_at"`)}
	}
	if _, ok := sbcdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StoreBalanceChangeDetail.created_at"`)}
	}
	return nil
}

func (sbcdc *StoreBalanceChangeDetailCreate) sqlSave(ctx context.Context) (*StoreBalanceChangeDetail, error) {
	_node, _spec := sbcdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sbcdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (sbcdc *StoreBalanceChangeDetailCreate) createSpec() (*StoreBalanceChangeDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &StoreBalanceChangeDetail{config: sbcdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: storebalancechangedetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: storebalancechangedetail.FieldID,
			},
		}
	)
	if id, ok := sbcdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sbcdc.mutation.AccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: storebalancechangedetail.FieldAccountID,
		})
		_node.AccountID = value
	}
	if value, ok := sbcdc.mutation.StoreCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldStoreCode,
		})
		_node.StoreCode = value
	}
	if value, ok := sbcdc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: storebalancechangedetail.FieldType,
		})
		_node.Type = value
	}
	if value, ok := sbcdc.mutation.InBatchNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldInBatchNo,
		})
		_node.InBatchNo = value
	}
	if value, ok := sbcdc.mutation.ThirdPayType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldThirdPayType,
		})
		_node.ThirdPayType = value
	}
	if value, ok := sbcdc.mutation.ThirdPayOrgan(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldThirdPayOrgan,
		})
		_node.ThirdPayOrgan = value
	}
	if value, ok := sbcdc.mutation.ThirdPayNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldThirdPayNo,
		})
		_node.ThirdPayNo = value
	}
	if value, ok := sbcdc.mutation.BcBindAccID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: storebalancechangedetail.FieldBcBindAccID,
		})
		_node.BcBindAccID = value
	}
	if value, ok := sbcdc.mutation.CashAccountNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldCashAccountNo,
		})
		_node.CashAccountNo = value
	}
	if value, ok := sbcdc.mutation.CashPrincipal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldCashPrincipal,
		})
		_node.CashPrincipal = value
	}
	if value, ok := sbcdc.mutation.CashBank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldCashBank,
		})
		_node.CashBank = value
	}
	if value, ok := sbcdc.mutation.TransactionNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldTransactionNo,
		})
		_node.TransactionNo = value
	}
	if value, ok := sbcdc.mutation.TransactionAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storebalancechangedetail.FieldTransactionAt,
		})
		_node.TransactionAt = value
	}
	if value, ok := sbcdc.mutation.BeforeFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: storebalancechangedetail.FieldBeforeFee,
		})
		_node.BeforeFee = value
	}
	if value, ok := sbcdc.mutation.ChangeFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: storebalancechangedetail.FieldChangeFee,
		})
		_node.ChangeFee = value
	}
	if value, ok := sbcdc.mutation.AfterFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: storebalancechangedetail.FieldAfterFee,
		})
		_node.AfterFee = value
	}
	if value, ok := sbcdc.mutation.OperatorNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldOperatorNo,
		})
		_node.OperatorNo = value
	}
	if value, ok := sbcdc.mutation.FlowNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storebalancechangedetail.FieldFlowNo,
		})
		_node.FlowNo = value
	}
	if value, ok := sbcdc.mutation.CheckState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: storebalancechangedetail.FieldCheckState,
		})
		_node.CheckState = value
	}
	if value, ok := sbcdc.mutation.CheckAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storebalancechangedetail.FieldCheckAt,
		})
		_node.CheckAt = value
	}
	if value, ok := sbcdc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: storebalancechangedetail.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := sbcdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storebalancechangedetail.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sbcdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storebalancechangedetail.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	return _node, _spec
}

// StoreBalanceChangeDetailCreateBulk is the builder for creating many StoreBalanceChangeDetail entities in bulk.
type StoreBalanceChangeDetailCreateBulk struct {
	config
	builders []*StoreBalanceChangeDetailCreate
}

// Save creates the StoreBalanceChangeDetail entities in the database.
func (sbcdcb *StoreBalanceChangeDetailCreateBulk) Save(ctx context.Context) ([]*StoreBalanceChangeDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sbcdcb.builders))
	nodes := make([]*StoreBalanceChangeDetail, len(sbcdcb.builders))
	mutators := make([]Mutator, len(sbcdcb.builders))
	for i := range sbcdcb.builders {
		func(i int, root context.Context) {
			builder := sbcdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreBalanceChangeDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sbcdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sbcdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sbcdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sbcdcb *StoreBalanceChangeDetailCreateBulk) SaveX(ctx context.Context) []*StoreBalanceChangeDetail {
	v, err := sbcdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbcdcb *StoreBalanceChangeDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := sbcdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbcdcb *StoreBalanceChangeDetailCreateBulk) ExecX(ctx context.Context) {
	if err := sbcdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
