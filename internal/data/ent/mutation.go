// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"finance/internal/data/ent/predicate"
	"finance/internal/data/ent/storebalanceaccount"
	"finance/internal/data/ent/storebalancechangedetail"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStoreBalanceAccount      = "StoreBalanceAccount"
	TypeStoreBalanceChangeDetail = "StoreBalanceChangeDetail"
)

// StoreBalanceAccountMutation represents an operation that mutates the StoreBalanceAccount nodes in the graph.
type StoreBalanceAccountMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint32
	account_no          *string
	store_code          *string
	upper_organ_no      *string
	pwd                 *string
	pwd_salt            *string
	balance_fee         *float64
	addbalance_fee      *float64
	total_charge_fee    *float64
	addtotal_charge_fee *float64
	is_deleted          *int8
	addis_deleted       *int8
	updated_at          *time.Time
	created_at          *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*StoreBalanceAccount, error)
	predicates          []predicate.StoreBalanceAccount
}

var _ ent.Mutation = (*StoreBalanceAccountMutation)(nil)

// storebalanceaccountOption allows management of the mutation configuration using functional options.
type storebalanceaccountOption func(*StoreBalanceAccountMutation)

// newStoreBalanceAccountMutation creates new mutation for the StoreBalanceAccount entity.
func newStoreBalanceAccountMutation(c config, op Op, opts ...storebalanceaccountOption) *StoreBalanceAccountMutation {
	m := &StoreBalanceAccountMutation{
		config:        c,
		op:            op,
		typ:           TypeStoreBalanceAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStoreBalanceAccountID sets the ID field of the mutation.
func withStoreBalanceAccountID(id uint32) storebalanceaccountOption {
	return func(m *StoreBalanceAccountMutation) {
		var (
			err   error
			once  sync.Once
			value *StoreBalanceAccount
		)
		m.oldValue = func(ctx context.Context) (*StoreBalanceAccount, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StoreBalanceAccount.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStoreBalanceAccount sets the old StoreBalanceAccount of the mutation.
func withStoreBalanceAccount(node *StoreBalanceAccount) storebalanceaccountOption {
	return func(m *StoreBalanceAccountMutation) {
		m.oldValue = func(context.Context) (*StoreBalanceAccount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StoreBalanceAccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StoreBalanceAccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StoreBalanceAccount entities.
func (m *StoreBalanceAccountMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StoreBalanceAccountMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StoreBalanceAccountMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StoreBalanceAccount.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccountNo sets the "account_no" field.
func (m *StoreBalanceAccountMutation) SetAccountNo(s string) {
	m.account_no = &s
}

// AccountNo returns the value of the "account_no" field in the mutation.
func (m *StoreBalanceAccountMutation) AccountNo() (r string, exists bool) {
	v := m.account_no
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountNo returns the old "account_no" field's value of the StoreBalanceAccount entity.
// If the StoreBalanceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceAccountMutation) OldAccountNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountNo: %w", err)
	}
	return oldValue.AccountNo, nil
}

// ClearAccountNo clears the value of the "account_no" field.
func (m *StoreBalanceAccountMutation) ClearAccountNo() {
	m.account_no = nil
	m.clearedFields[storebalanceaccount.FieldAccountNo] = struct{}{}
}

// AccountNoCleared returns if the "account_no" field was cleared in this mutation.
func (m *StoreBalanceAccountMutation) AccountNoCleared() bool {
	_, ok := m.clearedFields[storebalanceaccount.FieldAccountNo]
	return ok
}

// ResetAccountNo resets all changes to the "account_no" field.
func (m *StoreBalanceAccountMutation) ResetAccountNo() {
	m.account_no = nil
	delete(m.clearedFields, storebalanceaccount.FieldAccountNo)
}

// SetStoreCode sets the "store_code" field.
func (m *StoreBalanceAccountMutation) SetStoreCode(s string) {
	m.store_code = &s
}

// StoreCode returns the value of the "store_code" field in the mutation.
func (m *StoreBalanceAccountMutation) StoreCode() (r string, exists bool) {
	v := m.store_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreCode returns the old "store_code" field's value of the StoreBalanceAccount entity.
// If the StoreBalanceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceAccountMutation) OldStoreCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreCode: %w", err)
	}
	return oldValue.StoreCode, nil
}

// ClearStoreCode clears the value of the "store_code" field.
func (m *StoreBalanceAccountMutation) ClearStoreCode() {
	m.store_code = nil
	m.clearedFields[storebalanceaccount.FieldStoreCode] = struct{}{}
}

// StoreCodeCleared returns if the "store_code" field was cleared in this mutation.
func (m *StoreBalanceAccountMutation) StoreCodeCleared() bool {
	_, ok := m.clearedFields[storebalanceaccount.FieldStoreCode]
	return ok
}

// ResetStoreCode resets all changes to the "store_code" field.
func (m *StoreBalanceAccountMutation) ResetStoreCode() {
	m.store_code = nil
	delete(m.clearedFields, storebalanceaccount.FieldStoreCode)
}

// SetUpperOrganNo sets the "upper_organ_no" field.
func (m *StoreBalanceAccountMutation) SetUpperOrganNo(s string) {
	m.upper_organ_no = &s
}

// UpperOrganNo returns the value of the "upper_organ_no" field in the mutation.
func (m *StoreBalanceAccountMutation) UpperOrganNo() (r string, exists bool) {
	v := m.upper_organ_no
	if v == nil {
		return
	}
	return *v, true
}

// OldUpperOrganNo returns the old "upper_organ_no" field's value of the StoreBalanceAccount entity.
// If the StoreBalanceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceAccountMutation) OldUpperOrganNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpperOrganNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpperOrganNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpperOrganNo: %w", err)
	}
	return oldValue.UpperOrganNo, nil
}

// ClearUpperOrganNo clears the value of the "upper_organ_no" field.
func (m *StoreBalanceAccountMutation) ClearUpperOrganNo() {
	m.upper_organ_no = nil
	m.clearedFields[storebalanceaccount.FieldUpperOrganNo] = struct{}{}
}

// UpperOrganNoCleared returns if the "upper_organ_no" field was cleared in this mutation.
func (m *StoreBalanceAccountMutation) UpperOrganNoCleared() bool {
	_, ok := m.clearedFields[storebalanceaccount.FieldUpperOrganNo]
	return ok
}

// ResetUpperOrganNo resets all changes to the "upper_organ_no" field.
func (m *StoreBalanceAccountMutation) ResetUpperOrganNo() {
	m.upper_organ_no = nil
	delete(m.clearedFields, storebalanceaccount.FieldUpperOrganNo)
}

// SetPwd sets the "pwd" field.
func (m *StoreBalanceAccountMutation) SetPwd(s string) {
	m.pwd = &s
}

// Pwd returns the value of the "pwd" field in the mutation.
func (m *StoreBalanceAccountMutation) Pwd() (r string, exists bool) {
	v := m.pwd
	if v == nil {
		return
	}
	return *v, true
}

// OldPwd returns the old "pwd" field's value of the StoreBalanceAccount entity.
// If the StoreBalanceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceAccountMutation) OldPwd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPwd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPwd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPwd: %w", err)
	}
	return oldValue.Pwd, nil
}

// ClearPwd clears the value of the "pwd" field.
func (m *StoreBalanceAccountMutation) ClearPwd() {
	m.pwd = nil
	m.clearedFields[storebalanceaccount.FieldPwd] = struct{}{}
}

// PwdCleared returns if the "pwd" field was cleared in this mutation.
func (m *StoreBalanceAccountMutation) PwdCleared() bool {
	_, ok := m.clearedFields[storebalanceaccount.FieldPwd]
	return ok
}

// ResetPwd resets all changes to the "pwd" field.
func (m *StoreBalanceAccountMutation) ResetPwd() {
	m.pwd = nil
	delete(m.clearedFields, storebalanceaccount.FieldPwd)
}

// SetPwdSalt sets the "pwd_salt" field.
func (m *StoreBalanceAccountMutation) SetPwdSalt(s string) {
	m.pwd_salt = &s
}

// PwdSalt returns the value of the "pwd_salt" field in the mutation.
func (m *StoreBalanceAccountMutation) PwdSalt() (r string, exists bool) {
	v := m.pwd_salt
	if v == nil {
		return
	}
	return *v, true
}

// OldPwdSalt returns the old "pwd_salt" field's value of the StoreBalanceAccount entity.
// If the StoreBalanceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceAccountMutation) OldPwdSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPwdSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPwdSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPwdSalt: %w", err)
	}
	return oldValue.PwdSalt, nil
}

// ClearPwdSalt clears the value of the "pwd_salt" field.
func (m *StoreBalanceAccountMutation) ClearPwdSalt() {
	m.pwd_salt = nil
	m.clearedFields[storebalanceaccount.FieldPwdSalt] = struct{}{}
}

// PwdSaltCleared returns if the "pwd_salt" field was cleared in this mutation.
func (m *StoreBalanceAccountMutation) PwdSaltCleared() bool {
	_, ok := m.clearedFields[storebalanceaccount.FieldPwdSalt]
	return ok
}

// ResetPwdSalt resets all changes to the "pwd_salt" field.
func (m *StoreBalanceAccountMutation) ResetPwdSalt() {
	m.pwd_salt = nil
	delete(m.clearedFields, storebalanceaccount.FieldPwdSalt)
}

// SetBalanceFee sets the "balance_fee" field.
func (m *StoreBalanceAccountMutation) SetBalanceFee(f float64) {
	m.balance_fee = &f
	m.addbalance_fee = nil
}

// BalanceFee returns the value of the "balance_fee" field in the mutation.
func (m *StoreBalanceAccountMutation) BalanceFee() (r float64, exists bool) {
	v := m.balance_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldBalanceFee returns the old "balance_fee" field's value of the StoreBalanceAccount entity.
// If the StoreBalanceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceAccountMutation) OldBalanceFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalanceFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalanceFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalanceFee: %w", err)
	}
	return oldValue.BalanceFee, nil
}

// AddBalanceFee adds f to the "balance_fee" field.
func (m *StoreBalanceAccountMutation) AddBalanceFee(f float64) {
	if m.addbalance_fee != nil {
		*m.addbalance_fee += f
	} else {
		m.addbalance_fee = &f
	}
}

// AddedBalanceFee returns the value that was added to the "balance_fee" field in this mutation.
func (m *StoreBalanceAccountMutation) AddedBalanceFee() (r float64, exists bool) {
	v := m.addbalance_fee
	if v == nil {
		return
	}
	return *v, true
}

// ClearBalanceFee clears the value of the "balance_fee" field.
func (m *StoreBalanceAccountMutation) ClearBalanceFee() {
	m.balance_fee = nil
	m.addbalance_fee = nil
	m.clearedFields[storebalanceaccount.FieldBalanceFee] = struct{}{}
}

// BalanceFeeCleared returns if the "balance_fee" field was cleared in this mutation.
func (m *StoreBalanceAccountMutation) BalanceFeeCleared() bool {
	_, ok := m.clearedFields[storebalanceaccount.FieldBalanceFee]
	return ok
}

// ResetBalanceFee resets all changes to the "balance_fee" field.
func (m *StoreBalanceAccountMutation) ResetBalanceFee() {
	m.balance_fee = nil
	m.addbalance_fee = nil
	delete(m.clearedFields, storebalanceaccount.FieldBalanceFee)
}

// SetTotalChargeFee sets the "total_charge_fee" field.
func (m *StoreBalanceAccountMutation) SetTotalChargeFee(f float64) {
	m.total_charge_fee = &f
	m.addtotal_charge_fee = nil
}

// TotalChargeFee returns the value of the "total_charge_fee" field in the mutation.
func (m *StoreBalanceAccountMutation) TotalChargeFee() (r float64, exists bool) {
	v := m.total_charge_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalChargeFee returns the old "total_charge_fee" field's value of the StoreBalanceAccount entity.
// If the StoreBalanceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceAccountMutation) OldTotalChargeFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalChargeFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalChargeFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalChargeFee: %w", err)
	}
	return oldValue.TotalChargeFee, nil
}

// AddTotalChargeFee adds f to the "total_charge_fee" field.
func (m *StoreBalanceAccountMutation) AddTotalChargeFee(f float64) {
	if m.addtotal_charge_fee != nil {
		*m.addtotal_charge_fee += f
	} else {
		m.addtotal_charge_fee = &f
	}
}

// AddedTotalChargeFee returns the value that was added to the "total_charge_fee" field in this mutation.
func (m *StoreBalanceAccountMutation) AddedTotalChargeFee() (r float64, exists bool) {
	v := m.addtotal_charge_fee
	if v == nil {
		return
	}
	return *v, true
}

// ClearTotalChargeFee clears the value of the "total_charge_fee" field.
func (m *StoreBalanceAccountMutation) ClearTotalChargeFee() {
	m.total_charge_fee = nil
	m.addtotal_charge_fee = nil
	m.clearedFields[storebalanceaccount.FieldTotalChargeFee] = struct{}{}
}

// TotalChargeFeeCleared returns if the "total_charge_fee" field was cleared in this mutation.
func (m *StoreBalanceAccountMutation) TotalChargeFeeCleared() bool {
	_, ok := m.clearedFields[storebalanceaccount.FieldTotalChargeFee]
	return ok
}

// ResetTotalChargeFee resets all changes to the "total_charge_fee" field.
func (m *StoreBalanceAccountMutation) ResetTotalChargeFee() {
	m.total_charge_fee = nil
	m.addtotal_charge_fee = nil
	delete(m.clearedFields, storebalanceaccount.FieldTotalChargeFee)
}

// SetIsDeleted sets the "is_deleted" field.
func (m *StoreBalanceAccountMutation) SetIsDeleted(i int8) {
	m.is_deleted = &i
	m.addis_deleted = nil
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *StoreBalanceAccountMutation) IsDeleted() (r int8, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the StoreBalanceAccount entity.
// If the StoreBalanceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceAccountMutation) OldIsDeleted(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// AddIsDeleted adds i to the "is_deleted" field.
func (m *StoreBalanceAccountMutation) AddIsDeleted(i int8) {
	if m.addis_deleted != nil {
		*m.addis_deleted += i
	} else {
		m.addis_deleted = &i
	}
}

// AddedIsDeleted returns the value that was added to the "is_deleted" field in this mutation.
func (m *StoreBalanceAccountMutation) AddedIsDeleted() (r int8, exists bool) {
	v := m.addis_deleted
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsDeleted clears the value of the "is_deleted" field.
func (m *StoreBalanceAccountMutation) ClearIsDeleted() {
	m.is_deleted = nil
	m.addis_deleted = nil
	m.clearedFields[storebalanceaccount.FieldIsDeleted] = struct{}{}
}

// IsDeletedCleared returns if the "is_deleted" field was cleared in this mutation.
func (m *StoreBalanceAccountMutation) IsDeletedCleared() bool {
	_, ok := m.clearedFields[storebalanceaccount.FieldIsDeleted]
	return ok
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *StoreBalanceAccountMutation) ResetIsDeleted() {
	m.is_deleted = nil
	m.addis_deleted = nil
	delete(m.clearedFields, storebalanceaccount.FieldIsDeleted)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StoreBalanceAccountMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StoreBalanceAccountMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the StoreBalanceAccount entity.
// If the StoreBalanceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceAccountMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StoreBalanceAccountMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *StoreBalanceAccountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StoreBalanceAccountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the StoreBalanceAccount entity.
// If the StoreBalanceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceAccountMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StoreBalanceAccountMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the StoreBalanceAccountMutation builder.
func (m *StoreBalanceAccountMutation) Where(ps ...predicate.StoreBalanceAccount) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StoreBalanceAccountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StoreBalanceAccount).
func (m *StoreBalanceAccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StoreBalanceAccountMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.account_no != nil {
		fields = append(fields, storebalanceaccount.FieldAccountNo)
	}
	if m.store_code != nil {
		fields = append(fields, storebalanceaccount.FieldStoreCode)
	}
	if m.upper_organ_no != nil {
		fields = append(fields, storebalanceaccount.FieldUpperOrganNo)
	}
	if m.pwd != nil {
		fields = append(fields, storebalanceaccount.FieldPwd)
	}
	if m.pwd_salt != nil {
		fields = append(fields, storebalanceaccount.FieldPwdSalt)
	}
	if m.balance_fee != nil {
		fields = append(fields, storebalanceaccount.FieldBalanceFee)
	}
	if m.total_charge_fee != nil {
		fields = append(fields, storebalanceaccount.FieldTotalChargeFee)
	}
	if m.is_deleted != nil {
		fields = append(fields, storebalanceaccount.FieldIsDeleted)
	}
	if m.updated_at != nil {
		fields = append(fields, storebalanceaccount.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, storebalanceaccount.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StoreBalanceAccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case storebalanceaccount.FieldAccountNo:
		return m.AccountNo()
	case storebalanceaccount.FieldStoreCode:
		return m.StoreCode()
	case storebalanceaccount.FieldUpperOrganNo:
		return m.UpperOrganNo()
	case storebalanceaccount.FieldPwd:
		return m.Pwd()
	case storebalanceaccount.FieldPwdSalt:
		return m.PwdSalt()
	case storebalanceaccount.FieldBalanceFee:
		return m.BalanceFee()
	case storebalanceaccount.FieldTotalChargeFee:
		return m.TotalChargeFee()
	case storebalanceaccount.FieldIsDeleted:
		return m.IsDeleted()
	case storebalanceaccount.FieldUpdatedAt:
		return m.UpdatedAt()
	case storebalanceaccount.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StoreBalanceAccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case storebalanceaccount.FieldAccountNo:
		return m.OldAccountNo(ctx)
	case storebalanceaccount.FieldStoreCode:
		return m.OldStoreCode(ctx)
	case storebalanceaccount.FieldUpperOrganNo:
		return m.OldUpperOrganNo(ctx)
	case storebalanceaccount.FieldPwd:
		return m.OldPwd(ctx)
	case storebalanceaccount.FieldPwdSalt:
		return m.OldPwdSalt(ctx)
	case storebalanceaccount.FieldBalanceFee:
		return m.OldBalanceFee(ctx)
	case storebalanceaccount.FieldTotalChargeFee:
		return m.OldTotalChargeFee(ctx)
	case storebalanceaccount.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case storebalanceaccount.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case storebalanceaccount.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown StoreBalanceAccount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoreBalanceAccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case storebalanceaccount.FieldAccountNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountNo(v)
		return nil
	case storebalanceaccount.FieldStoreCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreCode(v)
		return nil
	case storebalanceaccount.FieldUpperOrganNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpperOrganNo(v)
		return nil
	case storebalanceaccount.FieldPwd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPwd(v)
		return nil
	case storebalanceaccount.FieldPwdSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPwdSalt(v)
		return nil
	case storebalanceaccount.FieldBalanceFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalanceFee(v)
		return nil
	case storebalanceaccount.FieldTotalChargeFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalChargeFee(v)
		return nil
	case storebalanceaccount.FieldIsDeleted:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case storebalanceaccount.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case storebalanceaccount.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown StoreBalanceAccount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StoreBalanceAccountMutation) AddedFields() []string {
	var fields []string
	if m.addbalance_fee != nil {
		fields = append(fields, storebalanceaccount.FieldBalanceFee)
	}
	if m.addtotal_charge_fee != nil {
		fields = append(fields, storebalanceaccount.FieldTotalChargeFee)
	}
	if m.addis_deleted != nil {
		fields = append(fields, storebalanceaccount.FieldIsDeleted)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StoreBalanceAccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case storebalanceaccount.FieldBalanceFee:
		return m.AddedBalanceFee()
	case storebalanceaccount.FieldTotalChargeFee:
		return m.AddedTotalChargeFee()
	case storebalanceaccount.FieldIsDeleted:
		return m.AddedIsDeleted()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoreBalanceAccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case storebalanceaccount.FieldBalanceFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalanceFee(v)
		return nil
	case storebalanceaccount.FieldTotalChargeFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalChargeFee(v)
		return nil
	case storebalanceaccount.FieldIsDeleted:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown StoreBalanceAccount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StoreBalanceAccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(storebalanceaccount.FieldAccountNo) {
		fields = append(fields, storebalanceaccount.FieldAccountNo)
	}
	if m.FieldCleared(storebalanceaccount.FieldStoreCode) {
		fields = append(fields, storebalanceaccount.FieldStoreCode)
	}
	if m.FieldCleared(storebalanceaccount.FieldUpperOrganNo) {
		fields = append(fields, storebalanceaccount.FieldUpperOrganNo)
	}
	if m.FieldCleared(storebalanceaccount.FieldPwd) {
		fields = append(fields, storebalanceaccount.FieldPwd)
	}
	if m.FieldCleared(storebalanceaccount.FieldPwdSalt) {
		fields = append(fields, storebalanceaccount.FieldPwdSalt)
	}
	if m.FieldCleared(storebalanceaccount.FieldBalanceFee) {
		fields = append(fields, storebalanceaccount.FieldBalanceFee)
	}
	if m.FieldCleared(storebalanceaccount.FieldTotalChargeFee) {
		fields = append(fields, storebalanceaccount.FieldTotalChargeFee)
	}
	if m.FieldCleared(storebalanceaccount.FieldIsDeleted) {
		fields = append(fields, storebalanceaccount.FieldIsDeleted)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StoreBalanceAccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StoreBalanceAccountMutation) ClearField(name string) error {
	switch name {
	case storebalanceaccount.FieldAccountNo:
		m.ClearAccountNo()
		return nil
	case storebalanceaccount.FieldStoreCode:
		m.ClearStoreCode()
		return nil
	case storebalanceaccount.FieldUpperOrganNo:
		m.ClearUpperOrganNo()
		return nil
	case storebalanceaccount.FieldPwd:
		m.ClearPwd()
		return nil
	case storebalanceaccount.FieldPwdSalt:
		m.ClearPwdSalt()
		return nil
	case storebalanceaccount.FieldBalanceFee:
		m.ClearBalanceFee()
		return nil
	case storebalanceaccount.FieldTotalChargeFee:
		m.ClearTotalChargeFee()
		return nil
	case storebalanceaccount.FieldIsDeleted:
		m.ClearIsDeleted()
		return nil
	}
	return fmt.Errorf("unknown StoreBalanceAccount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StoreBalanceAccountMutation) ResetField(name string) error {
	switch name {
	case storebalanceaccount.FieldAccountNo:
		m.ResetAccountNo()
		return nil
	case storebalanceaccount.FieldStoreCode:
		m.ResetStoreCode()
		return nil
	case storebalanceaccount.FieldUpperOrganNo:
		m.ResetUpperOrganNo()
		return nil
	case storebalanceaccount.FieldPwd:
		m.ResetPwd()
		return nil
	case storebalanceaccount.FieldPwdSalt:
		m.ResetPwdSalt()
		return nil
	case storebalanceaccount.FieldBalanceFee:
		m.ResetBalanceFee()
		return nil
	case storebalanceaccount.FieldTotalChargeFee:
		m.ResetTotalChargeFee()
		return nil
	case storebalanceaccount.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case storebalanceaccount.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case storebalanceaccount.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown StoreBalanceAccount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StoreBalanceAccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StoreBalanceAccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StoreBalanceAccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StoreBalanceAccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StoreBalanceAccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StoreBalanceAccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StoreBalanceAccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown StoreBalanceAccount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StoreBalanceAccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown StoreBalanceAccount edge %s", name)
}

// StoreBalanceChangeDetailMutation represents an operation that mutates the StoreBalanceChangeDetail nodes in the graph.
type StoreBalanceChangeDetailMutation struct {
	config
	op                Op
	typ               string
	id                *uint32
	account_id        *int32
	addaccount_id     *int32
	store_code        *string
	_type             *int8
	add_type          *int8
	in_batch_no       *string
	third_pay_type    *string
	third_pay_organ   *string
	third_pay_no      *string
	bc_bind_acc_id    *int32
	addbc_bind_acc_id *int32
	cash_account_no   *string
	cash_principal    *string
	cash_bank         *string
	transaction_no    *string
	transaction_at    *time.Time
	before_fee        *float64
	addbefore_fee     *float64
	change_fee        *float64
	addchange_fee     *float64
	after_fee         *float64
	addafter_fee      *float64
	operator_no       *string
	flow_no           *string
	check_state       *int8
	addcheck_state    *int8
	check_at          *time.Time
	is_deleted        *int8
	addis_deleted     *int8
	updated_at        *time.Time
	created_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*StoreBalanceChangeDetail, error)
	predicates        []predicate.StoreBalanceChangeDetail
}

var _ ent.Mutation = (*StoreBalanceChangeDetailMutation)(nil)

// storebalancechangedetailOption allows management of the mutation configuration using functional options.
type storebalancechangedetailOption func(*StoreBalanceChangeDetailMutation)

// newStoreBalanceChangeDetailMutation creates new mutation for the StoreBalanceChangeDetail entity.
func newStoreBalanceChangeDetailMutation(c config, op Op, opts ...storebalancechangedetailOption) *StoreBalanceChangeDetailMutation {
	m := &StoreBalanceChangeDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeStoreBalanceChangeDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStoreBalanceChangeDetailID sets the ID field of the mutation.
func withStoreBalanceChangeDetailID(id uint32) storebalancechangedetailOption {
	return func(m *StoreBalanceChangeDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *StoreBalanceChangeDetail
		)
		m.oldValue = func(ctx context.Context) (*StoreBalanceChangeDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StoreBalanceChangeDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStoreBalanceChangeDetail sets the old StoreBalanceChangeDetail of the mutation.
func withStoreBalanceChangeDetail(node *StoreBalanceChangeDetail) storebalancechangedetailOption {
	return func(m *StoreBalanceChangeDetailMutation) {
		m.oldValue = func(context.Context) (*StoreBalanceChangeDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StoreBalanceChangeDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StoreBalanceChangeDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StoreBalanceChangeDetail entities.
func (m *StoreBalanceChangeDetailMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StoreBalanceChangeDetailMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StoreBalanceChangeDetailMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StoreBalanceChangeDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccountID sets the "account_id" field.
func (m *StoreBalanceChangeDetailMutation) SetAccountID(i int32) {
	m.account_id = &i
	m.addaccount_id = nil
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) AccountID() (r int32, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldAccountID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// AddAccountID adds i to the "account_id" field.
func (m *StoreBalanceChangeDetailMutation) AddAccountID(i int32) {
	if m.addaccount_id != nil {
		*m.addaccount_id += i
	} else {
		m.addaccount_id = &i
	}
}

// AddedAccountID returns the value that was added to the "account_id" field in this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedAccountID() (r int32, exists bool) {
	v := m.addaccount_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *StoreBalanceChangeDetailMutation) ResetAccountID() {
	m.account_id = nil
	m.addaccount_id = nil
}

// SetStoreCode sets the "store_code" field.
func (m *StoreBalanceChangeDetailMutation) SetStoreCode(s string) {
	m.store_code = &s
}

// StoreCode returns the value of the "store_code" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) StoreCode() (r string, exists bool) {
	v := m.store_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreCode returns the old "store_code" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldStoreCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreCode: %w", err)
	}
	return oldValue.StoreCode, nil
}

// ResetStoreCode resets all changes to the "store_code" field.
func (m *StoreBalanceChangeDetailMutation) ResetStoreCode() {
	m.store_code = nil
}

// SetType sets the "type" field.
func (m *StoreBalanceChangeDetailMutation) SetType(i int8) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) GetType() (r int8, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *StoreBalanceChangeDetailMutation) AddType(i int8) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedType() (r int8, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *StoreBalanceChangeDetailMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetInBatchNo sets the "in_batch_no" field.
func (m *StoreBalanceChangeDetailMutation) SetInBatchNo(s string) {
	m.in_batch_no = &s
}

// InBatchNo returns the value of the "in_batch_no" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) InBatchNo() (r string, exists bool) {
	v := m.in_batch_no
	if v == nil {
		return
	}
	return *v, true
}

// OldInBatchNo returns the old "in_batch_no" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldInBatchNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInBatchNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInBatchNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInBatchNo: %w", err)
	}
	return oldValue.InBatchNo, nil
}

// ResetInBatchNo resets all changes to the "in_batch_no" field.
func (m *StoreBalanceChangeDetailMutation) ResetInBatchNo() {
	m.in_batch_no = nil
}

// SetThirdPayType sets the "third_pay_type" field.
func (m *StoreBalanceChangeDetailMutation) SetThirdPayType(s string) {
	m.third_pay_type = &s
}

// ThirdPayType returns the value of the "third_pay_type" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) ThirdPayType() (r string, exists bool) {
	v := m.third_pay_type
	if v == nil {
		return
	}
	return *v, true
}

// OldThirdPayType returns the old "third_pay_type" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldThirdPayType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThirdPayType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThirdPayType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThirdPayType: %w", err)
	}
	return oldValue.ThirdPayType, nil
}

// ResetThirdPayType resets all changes to the "third_pay_type" field.
func (m *StoreBalanceChangeDetailMutation) ResetThirdPayType() {
	m.third_pay_type = nil
}

// SetThirdPayOrgan sets the "third_pay_organ" field.
func (m *StoreBalanceChangeDetailMutation) SetThirdPayOrgan(s string) {
	m.third_pay_organ = &s
}

// ThirdPayOrgan returns the value of the "third_pay_organ" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) ThirdPayOrgan() (r string, exists bool) {
	v := m.third_pay_organ
	if v == nil {
		return
	}
	return *v, true
}

// OldThirdPayOrgan returns the old "third_pay_organ" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldThirdPayOrgan(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThirdPayOrgan is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThirdPayOrgan requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThirdPayOrgan: %w", err)
	}
	return oldValue.ThirdPayOrgan, nil
}

// ResetThirdPayOrgan resets all changes to the "third_pay_organ" field.
func (m *StoreBalanceChangeDetailMutation) ResetThirdPayOrgan() {
	m.third_pay_organ = nil
}

// SetThirdPayNo sets the "third_pay_no" field.
func (m *StoreBalanceChangeDetailMutation) SetThirdPayNo(s string) {
	m.third_pay_no = &s
}

// ThirdPayNo returns the value of the "third_pay_no" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) ThirdPayNo() (r string, exists bool) {
	v := m.third_pay_no
	if v == nil {
		return
	}
	return *v, true
}

// OldThirdPayNo returns the old "third_pay_no" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldThirdPayNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThirdPayNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThirdPayNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThirdPayNo: %w", err)
	}
	return oldValue.ThirdPayNo, nil
}

// ResetThirdPayNo resets all changes to the "third_pay_no" field.
func (m *StoreBalanceChangeDetailMutation) ResetThirdPayNo() {
	m.third_pay_no = nil
}

// SetBcBindAccID sets the "bc_bind_acc_id" field.
func (m *StoreBalanceChangeDetailMutation) SetBcBindAccID(i int32) {
	m.bc_bind_acc_id = &i
	m.addbc_bind_acc_id = nil
}

// BcBindAccID returns the value of the "bc_bind_acc_id" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) BcBindAccID() (r int32, exists bool) {
	v := m.bc_bind_acc_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBcBindAccID returns the old "bc_bind_acc_id" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldBcBindAccID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBcBindAccID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBcBindAccID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBcBindAccID: %w", err)
	}
	return oldValue.BcBindAccID, nil
}

// AddBcBindAccID adds i to the "bc_bind_acc_id" field.
func (m *StoreBalanceChangeDetailMutation) AddBcBindAccID(i int32) {
	if m.addbc_bind_acc_id != nil {
		*m.addbc_bind_acc_id += i
	} else {
		m.addbc_bind_acc_id = &i
	}
}

// AddedBcBindAccID returns the value that was added to the "bc_bind_acc_id" field in this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedBcBindAccID() (r int32, exists bool) {
	v := m.addbc_bind_acc_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetBcBindAccID resets all changes to the "bc_bind_acc_id" field.
func (m *StoreBalanceChangeDetailMutation) ResetBcBindAccID() {
	m.bc_bind_acc_id = nil
	m.addbc_bind_acc_id = nil
}

// SetCashAccountNo sets the "cash_account_no" field.
func (m *StoreBalanceChangeDetailMutation) SetCashAccountNo(s string) {
	m.cash_account_no = &s
}

// CashAccountNo returns the value of the "cash_account_no" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) CashAccountNo() (r string, exists bool) {
	v := m.cash_account_no
	if v == nil {
		return
	}
	return *v, true
}

// OldCashAccountNo returns the old "cash_account_no" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldCashAccountNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCashAccountNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCashAccountNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCashAccountNo: %w", err)
	}
	return oldValue.CashAccountNo, nil
}

// ResetCashAccountNo resets all changes to the "cash_account_no" field.
func (m *StoreBalanceChangeDetailMutation) ResetCashAccountNo() {
	m.cash_account_no = nil
}

// SetCashPrincipal sets the "cash_principal" field.
func (m *StoreBalanceChangeDetailMutation) SetCashPrincipal(s string) {
	m.cash_principal = &s
}

// CashPrincipal returns the value of the "cash_principal" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) CashPrincipal() (r string, exists bool) {
	v := m.cash_principal
	if v == nil {
		return
	}
	return *v, true
}

// OldCashPrincipal returns the old "cash_principal" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldCashPrincipal(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCashPrincipal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCashPrincipal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCashPrincipal: %w", err)
	}
	return oldValue.CashPrincipal, nil
}

// ResetCashPrincipal resets all changes to the "cash_principal" field.
func (m *StoreBalanceChangeDetailMutation) ResetCashPrincipal() {
	m.cash_principal = nil
}

// SetCashBank sets the "cash_bank" field.
func (m *StoreBalanceChangeDetailMutation) SetCashBank(s string) {
	m.cash_bank = &s
}

// CashBank returns the value of the "cash_bank" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) CashBank() (r string, exists bool) {
	v := m.cash_bank
	if v == nil {
		return
	}
	return *v, true
}

// OldCashBank returns the old "cash_bank" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldCashBank(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCashBank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCashBank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCashBank: %w", err)
	}
	return oldValue.CashBank, nil
}

// ResetCashBank resets all changes to the "cash_bank" field.
func (m *StoreBalanceChangeDetailMutation) ResetCashBank() {
	m.cash_bank = nil
}

// SetTransactionNo sets the "transaction_no" field.
func (m *StoreBalanceChangeDetailMutation) SetTransactionNo(s string) {
	m.transaction_no = &s
}

// TransactionNo returns the value of the "transaction_no" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) TransactionNo() (r string, exists bool) {
	v := m.transaction_no
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionNo returns the old "transaction_no" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldTransactionNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionNo: %w", err)
	}
	return oldValue.TransactionNo, nil
}

// ResetTransactionNo resets all changes to the "transaction_no" field.
func (m *StoreBalanceChangeDetailMutation) ResetTransactionNo() {
	m.transaction_no = nil
}

// SetTransactionAt sets the "transaction_at" field.
func (m *StoreBalanceChangeDetailMutation) SetTransactionAt(t time.Time) {
	m.transaction_at = &t
}

// TransactionAt returns the value of the "transaction_at" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) TransactionAt() (r time.Time, exists bool) {
	v := m.transaction_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionAt returns the old "transaction_at" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldTransactionAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionAt: %w", err)
	}
	return oldValue.TransactionAt, nil
}

// ResetTransactionAt resets all changes to the "transaction_at" field.
func (m *StoreBalanceChangeDetailMutation) ResetTransactionAt() {
	m.transaction_at = nil
}

// SetBeforeFee sets the "before_fee" field.
func (m *StoreBalanceChangeDetailMutation) SetBeforeFee(f float64) {
	m.before_fee = &f
	m.addbefore_fee = nil
}

// BeforeFee returns the value of the "before_fee" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) BeforeFee() (r float64, exists bool) {
	v := m.before_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldBeforeFee returns the old "before_fee" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldBeforeFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBeforeFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBeforeFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBeforeFee: %w", err)
	}
	return oldValue.BeforeFee, nil
}

// AddBeforeFee adds f to the "before_fee" field.
func (m *StoreBalanceChangeDetailMutation) AddBeforeFee(f float64) {
	if m.addbefore_fee != nil {
		*m.addbefore_fee += f
	} else {
		m.addbefore_fee = &f
	}
}

// AddedBeforeFee returns the value that was added to the "before_fee" field in this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedBeforeFee() (r float64, exists bool) {
	v := m.addbefore_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetBeforeFee resets all changes to the "before_fee" field.
func (m *StoreBalanceChangeDetailMutation) ResetBeforeFee() {
	m.before_fee = nil
	m.addbefore_fee = nil
}

// SetChangeFee sets the "change_fee" field.
func (m *StoreBalanceChangeDetailMutation) SetChangeFee(f float64) {
	m.change_fee = &f
	m.addchange_fee = nil
}

// ChangeFee returns the value of the "change_fee" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) ChangeFee() (r float64, exists bool) {
	v := m.change_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldChangeFee returns the old "change_fee" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldChangeFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChangeFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChangeFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChangeFee: %w", err)
	}
	return oldValue.ChangeFee, nil
}

// AddChangeFee adds f to the "change_fee" field.
func (m *StoreBalanceChangeDetailMutation) AddChangeFee(f float64) {
	if m.addchange_fee != nil {
		*m.addchange_fee += f
	} else {
		m.addchange_fee = &f
	}
}

// AddedChangeFee returns the value that was added to the "change_fee" field in this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedChangeFee() (r float64, exists bool) {
	v := m.addchange_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetChangeFee resets all changes to the "change_fee" field.
func (m *StoreBalanceChangeDetailMutation) ResetChangeFee() {
	m.change_fee = nil
	m.addchange_fee = nil
}

// SetAfterFee sets the "after_fee" field.
func (m *StoreBalanceChangeDetailMutation) SetAfterFee(f float64) {
	m.after_fee = &f
	m.addafter_fee = nil
}

// AfterFee returns the value of the "after_fee" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) AfterFee() (r float64, exists bool) {
	v := m.after_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldAfterFee returns the old "after_fee" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldAfterFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAfterFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAfterFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAfterFee: %w", err)
	}
	return oldValue.AfterFee, nil
}

// AddAfterFee adds f to the "after_fee" field.
func (m *StoreBalanceChangeDetailMutation) AddAfterFee(f float64) {
	if m.addafter_fee != nil {
		*m.addafter_fee += f
	} else {
		m.addafter_fee = &f
	}
}

// AddedAfterFee returns the value that was added to the "after_fee" field in this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedAfterFee() (r float64, exists bool) {
	v := m.addafter_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetAfterFee resets all changes to the "after_fee" field.
func (m *StoreBalanceChangeDetailMutation) ResetAfterFee() {
	m.after_fee = nil
	m.addafter_fee = nil
}

// SetOperatorNo sets the "operator_no" field.
func (m *StoreBalanceChangeDetailMutation) SetOperatorNo(s string) {
	m.operator_no = &s
}

// OperatorNo returns the value of the "operator_no" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) OperatorNo() (r string, exists bool) {
	v := m.operator_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOperatorNo returns the old "operator_no" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldOperatorNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperatorNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperatorNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperatorNo: %w", err)
	}
	return oldValue.OperatorNo, nil
}

// ResetOperatorNo resets all changes to the "operator_no" field.
func (m *StoreBalanceChangeDetailMutation) ResetOperatorNo() {
	m.operator_no = nil
}

// SetFlowNo sets the "flow_no" field.
func (m *StoreBalanceChangeDetailMutation) SetFlowNo(s string) {
	m.flow_no = &s
}

// FlowNo returns the value of the "flow_no" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) FlowNo() (r string, exists bool) {
	v := m.flow_no
	if v == nil {
		return
	}
	return *v, true
}

// OldFlowNo returns the old "flow_no" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldFlowNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlowNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlowNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlowNo: %w", err)
	}
	return oldValue.FlowNo, nil
}

// ResetFlowNo resets all changes to the "flow_no" field.
func (m *StoreBalanceChangeDetailMutation) ResetFlowNo() {
	m.flow_no = nil
}

// SetCheckState sets the "check_state" field.
func (m *StoreBalanceChangeDetailMutation) SetCheckState(i int8) {
	m.check_state = &i
	m.addcheck_state = nil
}

// CheckState returns the value of the "check_state" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) CheckState() (r int8, exists bool) {
	v := m.check_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckState returns the old "check_state" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldCheckState(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCheckState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCheckState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckState: %w", err)
	}
	return oldValue.CheckState, nil
}

// AddCheckState adds i to the "check_state" field.
func (m *StoreBalanceChangeDetailMutation) AddCheckState(i int8) {
	if m.addcheck_state != nil {
		*m.addcheck_state += i
	} else {
		m.addcheck_state = &i
	}
}

// AddedCheckState returns the value that was added to the "check_state" field in this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedCheckState() (r int8, exists bool) {
	v := m.addcheck_state
	if v == nil {
		return
	}
	return *v, true
}

// ResetCheckState resets all changes to the "check_state" field.
func (m *StoreBalanceChangeDetailMutation) ResetCheckState() {
	m.check_state = nil
	m.addcheck_state = nil
}

// SetCheckAt sets the "check_at" field.
func (m *StoreBalanceChangeDetailMutation) SetCheckAt(t time.Time) {
	m.check_at = &t
}

// CheckAt returns the value of the "check_at" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) CheckAt() (r time.Time, exists bool) {
	v := m.check_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckAt returns the old "check_at" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldCheckAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCheckAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCheckAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckAt: %w", err)
	}
	return oldValue.CheckAt, nil
}

// ResetCheckAt resets all changes to the "check_at" field.
func (m *StoreBalanceChangeDetailMutation) ResetCheckAt() {
	m.check_at = nil
}

// SetIsDeleted sets the "is_deleted" field.
func (m *StoreBalanceChangeDetailMutation) SetIsDeleted(i int8) {
	m.is_deleted = &i
	m.addis_deleted = nil
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) IsDeleted() (r int8, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldIsDeleted(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// AddIsDeleted adds i to the "is_deleted" field.
func (m *StoreBalanceChangeDetailMutation) AddIsDeleted(i int8) {
	if m.addis_deleted != nil {
		*m.addis_deleted += i
	} else {
		m.addis_deleted = &i
	}
}

// AddedIsDeleted returns the value that was added to the "is_deleted" field in this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedIsDeleted() (r int8, exists bool) {
	v := m.addis_deleted
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *StoreBalanceChangeDetailMutation) ResetIsDeleted() {
	m.is_deleted = nil
	m.addis_deleted = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StoreBalanceChangeDetailMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StoreBalanceChangeDetailMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *StoreBalanceChangeDetailMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StoreBalanceChangeDetailMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the StoreBalanceChangeDetail entity.
// If the StoreBalanceChangeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreBalanceChangeDetailMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StoreBalanceChangeDetailMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the StoreBalanceChangeDetailMutation builder.
func (m *StoreBalanceChangeDetailMutation) Where(ps ...predicate.StoreBalanceChangeDetail) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StoreBalanceChangeDetailMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StoreBalanceChangeDetail).
func (m *StoreBalanceChangeDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StoreBalanceChangeDetailMutation) Fields() []string {
	fields := make([]string, 0, 23)
	if m.account_id != nil {
		fields = append(fields, storebalancechangedetail.FieldAccountID)
	}
	if m.store_code != nil {
		fields = append(fields, storebalancechangedetail.FieldStoreCode)
	}
	if m._type != nil {
		fields = append(fields, storebalancechangedetail.FieldType)
	}
	if m.in_batch_no != nil {
		fields = append(fields, storebalancechangedetail.FieldInBatchNo)
	}
	if m.third_pay_type != nil {
		fields = append(fields, storebalancechangedetail.FieldThirdPayType)
	}
	if m.third_pay_organ != nil {
		fields = append(fields, storebalancechangedetail.FieldThirdPayOrgan)
	}
	if m.third_pay_no != nil {
		fields = append(fields, storebalancechangedetail.FieldThirdPayNo)
	}
	if m.bc_bind_acc_id != nil {
		fields = append(fields, storebalancechangedetail.FieldBcBindAccID)
	}
	if m.cash_account_no != nil {
		fields = append(fields, storebalancechangedetail.FieldCashAccountNo)
	}
	if m.cash_principal != nil {
		fields = append(fields, storebalancechangedetail.FieldCashPrincipal)
	}
	if m.cash_bank != nil {
		fields = append(fields, storebalancechangedetail.FieldCashBank)
	}
	if m.transaction_no != nil {
		fields = append(fields, storebalancechangedetail.FieldTransactionNo)
	}
	if m.transaction_at != nil {
		fields = append(fields, storebalancechangedetail.FieldTransactionAt)
	}
	if m.before_fee != nil {
		fields = append(fields, storebalancechangedetail.FieldBeforeFee)
	}
	if m.change_fee != nil {
		fields = append(fields, storebalancechangedetail.FieldChangeFee)
	}
	if m.after_fee != nil {
		fields = append(fields, storebalancechangedetail.FieldAfterFee)
	}
	if m.operator_no != nil {
		fields = append(fields, storebalancechangedetail.FieldOperatorNo)
	}
	if m.flow_no != nil {
		fields = append(fields, storebalancechangedetail.FieldFlowNo)
	}
	if m.check_state != nil {
		fields = append(fields, storebalancechangedetail.FieldCheckState)
	}
	if m.check_at != nil {
		fields = append(fields, storebalancechangedetail.FieldCheckAt)
	}
	if m.is_deleted != nil {
		fields = append(fields, storebalancechangedetail.FieldIsDeleted)
	}
	if m.updated_at != nil {
		fields = append(fields, storebalancechangedetail.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, storebalancechangedetail.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StoreBalanceChangeDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case storebalancechangedetail.FieldAccountID:
		return m.AccountID()
	case storebalancechangedetail.FieldStoreCode:
		return m.StoreCode()
	case storebalancechangedetail.FieldType:
		return m.GetType()
	case storebalancechangedetail.FieldInBatchNo:
		return m.InBatchNo()
	case storebalancechangedetail.FieldThirdPayType:
		return m.ThirdPayType()
	case storebalancechangedetail.FieldThirdPayOrgan:
		return m.ThirdPayOrgan()
	case storebalancechangedetail.FieldThirdPayNo:
		return m.ThirdPayNo()
	case storebalancechangedetail.FieldBcBindAccID:
		return m.BcBindAccID()
	case storebalancechangedetail.FieldCashAccountNo:
		return m.CashAccountNo()
	case storebalancechangedetail.FieldCashPrincipal:
		return m.CashPrincipal()
	case storebalancechangedetail.FieldCashBank:
		return m.CashBank()
	case storebalancechangedetail.FieldTransactionNo:
		return m.TransactionNo()
	case storebalancechangedetail.FieldTransactionAt:
		return m.TransactionAt()
	case storebalancechangedetail.FieldBeforeFee:
		return m.BeforeFee()
	case storebalancechangedetail.FieldChangeFee:
		return m.ChangeFee()
	case storebalancechangedetail.FieldAfterFee:
		return m.AfterFee()
	case storebalancechangedetail.FieldOperatorNo:
		return m.OperatorNo()
	case storebalancechangedetail.FieldFlowNo:
		return m.FlowNo()
	case storebalancechangedetail.FieldCheckState:
		return m.CheckState()
	case storebalancechangedetail.FieldCheckAt:
		return m.CheckAt()
	case storebalancechangedetail.FieldIsDeleted:
		return m.IsDeleted()
	case storebalancechangedetail.FieldUpdatedAt:
		return m.UpdatedAt()
	case storebalancechangedetail.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StoreBalanceChangeDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case storebalancechangedetail.FieldAccountID:
		return m.OldAccountID(ctx)
	case storebalancechangedetail.FieldStoreCode:
		return m.OldStoreCode(ctx)
	case storebalancechangedetail.FieldType:
		return m.OldType(ctx)
	case storebalancechangedetail.FieldInBatchNo:
		return m.OldInBatchNo(ctx)
	case storebalancechangedetail.FieldThirdPayType:
		return m.OldThirdPayType(ctx)
	case storebalancechangedetail.FieldThirdPayOrgan:
		return m.OldThirdPayOrgan(ctx)
	case storebalancechangedetail.FieldThirdPayNo:
		return m.OldThirdPayNo(ctx)
	case storebalancechangedetail.FieldBcBindAccID:
		return m.OldBcBindAccID(ctx)
	case storebalancechangedetail.FieldCashAccountNo:
		return m.OldCashAccountNo(ctx)
	case storebalancechangedetail.FieldCashPrincipal:
		return m.OldCashPrincipal(ctx)
	case storebalancechangedetail.FieldCashBank:
		return m.OldCashBank(ctx)
	case storebalancechangedetail.FieldTransactionNo:
		return m.OldTransactionNo(ctx)
	case storebalancechangedetail.FieldTransactionAt:
		return m.OldTransactionAt(ctx)
	case storebalancechangedetail.FieldBeforeFee:
		return m.OldBeforeFee(ctx)
	case storebalancechangedetail.FieldChangeFee:
		return m.OldChangeFee(ctx)
	case storebalancechangedetail.FieldAfterFee:
		return m.OldAfterFee(ctx)
	case storebalancechangedetail.FieldOperatorNo:
		return m.OldOperatorNo(ctx)
	case storebalancechangedetail.FieldFlowNo:
		return m.OldFlowNo(ctx)
	case storebalancechangedetail.FieldCheckState:
		return m.OldCheckState(ctx)
	case storebalancechangedetail.FieldCheckAt:
		return m.OldCheckAt(ctx)
	case storebalancechangedetail.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case storebalancechangedetail.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case storebalancechangedetail.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown StoreBalanceChangeDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoreBalanceChangeDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case storebalancechangedetail.FieldAccountID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case storebalancechangedetail.FieldStoreCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreCode(v)
		return nil
	case storebalancechangedetail.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case storebalancechangedetail.FieldInBatchNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInBatchNo(v)
		return nil
	case storebalancechangedetail.FieldThirdPayType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThirdPayType(v)
		return nil
	case storebalancechangedetail.FieldThirdPayOrgan:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThirdPayOrgan(v)
		return nil
	case storebalancechangedetail.FieldThirdPayNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThirdPayNo(v)
		return nil
	case storebalancechangedetail.FieldBcBindAccID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBcBindAccID(v)
		return nil
	case storebalancechangedetail.FieldCashAccountNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCashAccountNo(v)
		return nil
	case storebalancechangedetail.FieldCashPrincipal:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCashPrincipal(v)
		return nil
	case storebalancechangedetail.FieldCashBank:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCashBank(v)
		return nil
	case storebalancechangedetail.FieldTransactionNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionNo(v)
		return nil
	case storebalancechangedetail.FieldTransactionAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionAt(v)
		return nil
	case storebalancechangedetail.FieldBeforeFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBeforeFee(v)
		return nil
	case storebalancechangedetail.FieldChangeFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChangeFee(v)
		return nil
	case storebalancechangedetail.FieldAfterFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAfterFee(v)
		return nil
	case storebalancechangedetail.FieldOperatorNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperatorNo(v)
		return nil
	case storebalancechangedetail.FieldFlowNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlowNo(v)
		return nil
	case storebalancechangedetail.FieldCheckState:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckState(v)
		return nil
	case storebalancechangedetail.FieldCheckAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckAt(v)
		return nil
	case storebalancechangedetail.FieldIsDeleted:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case storebalancechangedetail.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case storebalancechangedetail.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown StoreBalanceChangeDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedFields() []string {
	var fields []string
	if m.addaccount_id != nil {
		fields = append(fields, storebalancechangedetail.FieldAccountID)
	}
	if m.add_type != nil {
		fields = append(fields, storebalancechangedetail.FieldType)
	}
	if m.addbc_bind_acc_id != nil {
		fields = append(fields, storebalancechangedetail.FieldBcBindAccID)
	}
	if m.addbefore_fee != nil {
		fields = append(fields, storebalancechangedetail.FieldBeforeFee)
	}
	if m.addchange_fee != nil {
		fields = append(fields, storebalancechangedetail.FieldChangeFee)
	}
	if m.addafter_fee != nil {
		fields = append(fields, storebalancechangedetail.FieldAfterFee)
	}
	if m.addcheck_state != nil {
		fields = append(fields, storebalancechangedetail.FieldCheckState)
	}
	if m.addis_deleted != nil {
		fields = append(fields, storebalancechangedetail.FieldIsDeleted)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StoreBalanceChangeDetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case storebalancechangedetail.FieldAccountID:
		return m.AddedAccountID()
	case storebalancechangedetail.FieldType:
		return m.AddedType()
	case storebalancechangedetail.FieldBcBindAccID:
		return m.AddedBcBindAccID()
	case storebalancechangedetail.FieldBeforeFee:
		return m.AddedBeforeFee()
	case storebalancechangedetail.FieldChangeFee:
		return m.AddedChangeFee()
	case storebalancechangedetail.FieldAfterFee:
		return m.AddedAfterFee()
	case storebalancechangedetail.FieldCheckState:
		return m.AddedCheckState()
	case storebalancechangedetail.FieldIsDeleted:
		return m.AddedIsDeleted()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoreBalanceChangeDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case storebalancechangedetail.FieldAccountID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccountID(v)
		return nil
	case storebalancechangedetail.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case storebalancechangedetail.FieldBcBindAccID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBcBindAccID(v)
		return nil
	case storebalancechangedetail.FieldBeforeFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBeforeFee(v)
		return nil
	case storebalancechangedetail.FieldChangeFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChangeFee(v)
		return nil
	case storebalancechangedetail.FieldAfterFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAfterFee(v)
		return nil
	case storebalancechangedetail.FieldCheckState:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCheckState(v)
		return nil
	case storebalancechangedetail.FieldIsDeleted:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown StoreBalanceChangeDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StoreBalanceChangeDetailMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StoreBalanceChangeDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StoreBalanceChangeDetailMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StoreBalanceChangeDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StoreBalanceChangeDetailMutation) ResetField(name string) error {
	switch name {
	case storebalancechangedetail.FieldAccountID:
		m.ResetAccountID()
		return nil
	case storebalancechangedetail.FieldStoreCode:
		m.ResetStoreCode()
		return nil
	case storebalancechangedetail.FieldType:
		m.ResetType()
		return nil
	case storebalancechangedetail.FieldInBatchNo:
		m.ResetInBatchNo()
		return nil
	case storebalancechangedetail.FieldThirdPayType:
		m.ResetThirdPayType()
		return nil
	case storebalancechangedetail.FieldThirdPayOrgan:
		m.ResetThirdPayOrgan()
		return nil
	case storebalancechangedetail.FieldThirdPayNo:
		m.ResetThirdPayNo()
		return nil
	case storebalancechangedetail.FieldBcBindAccID:
		m.ResetBcBindAccID()
		return nil
	case storebalancechangedetail.FieldCashAccountNo:
		m.ResetCashAccountNo()
		return nil
	case storebalancechangedetail.FieldCashPrincipal:
		m.ResetCashPrincipal()
		return nil
	case storebalancechangedetail.FieldCashBank:
		m.ResetCashBank()
		return nil
	case storebalancechangedetail.FieldTransactionNo:
		m.ResetTransactionNo()
		return nil
	case storebalancechangedetail.FieldTransactionAt:
		m.ResetTransactionAt()
		return nil
	case storebalancechangedetail.FieldBeforeFee:
		m.ResetBeforeFee()
		return nil
	case storebalancechangedetail.FieldChangeFee:
		m.ResetChangeFee()
		return nil
	case storebalancechangedetail.FieldAfterFee:
		m.ResetAfterFee()
		return nil
	case storebalancechangedetail.FieldOperatorNo:
		m.ResetOperatorNo()
		return nil
	case storebalancechangedetail.FieldFlowNo:
		m.ResetFlowNo()
		return nil
	case storebalancechangedetail.FieldCheckState:
		m.ResetCheckState()
		return nil
	case storebalancechangedetail.FieldCheckAt:
		m.ResetCheckAt()
		return nil
	case storebalancechangedetail.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case storebalancechangedetail.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case storebalancechangedetail.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown StoreBalanceChangeDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StoreBalanceChangeDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StoreBalanceChangeDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StoreBalanceChangeDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StoreBalanceChangeDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StoreBalanceChangeDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StoreBalanceChangeDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown StoreBalanceChangeDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StoreBalanceChangeDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown StoreBalanceChangeDetail edge %s", name)
}
