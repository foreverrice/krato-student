// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.13.0
// source: api/finance/v1/finance.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBalanceAddBatchBalanceDetail = "/api.finance.v1.Balance/AddBatchBalanceDetail"

type BalanceHTTPServer interface {
	AddBatchBalanceDetail(context.Context, *BalanceDetailReq) (*BalanceDetailResp, error)
}

func RegisterBalanceHTTPServer(s *http.Server, srv BalanceHTTPServer) {
	r := s.Route("/")
	r.GET("balance/add/batch/detail", _Balance_AddBatchBalanceDetail0_HTTP_Handler(srv))
}

func _Balance_AddBatchBalanceDetail0_HTTP_Handler(srv BalanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BalanceDetailReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBalanceAddBatchBalanceDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddBatchBalanceDetail(ctx, req.(*BalanceDetailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BalanceDetailResp)
		return ctx.Result(200, reply)
	}
}

type BalanceHTTPClient interface {
	AddBatchBalanceDetail(ctx context.Context, req *BalanceDetailReq, opts ...http.CallOption) (rsp *BalanceDetailResp, err error)
}

type BalanceHTTPClientImpl struct {
	cc *http.Client
}

func NewBalanceHTTPClient(client *http.Client) BalanceHTTPClient {
	return &BalanceHTTPClientImpl{client}
}

func (c *BalanceHTTPClientImpl) AddBatchBalanceDetail(ctx context.Context, in *BalanceDetailReq, opts ...http.CallOption) (*BalanceDetailResp, error) {
	var out BalanceDetailResp
	pattern := "balance/add/batch/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBalanceAddBatchBalanceDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
